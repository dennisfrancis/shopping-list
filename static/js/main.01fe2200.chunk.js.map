{"version":3,"sources":["consts/itemConsts.ts","contexts/storage.ts","components/ItemControls.tsx","components/ItemDisplay.tsx","components/ItemList.tsx","pages/NewList.tsx","components/ListDisplay.tsx","pages/PreviousLists.tsx","pages/DataPage.tsx","types/item.ts","storage/storageDefs.ts","App.tsx","index.tsx"],"names":["Units","Set","Categories","StorageType","db","undefined","listeners","this","invokeListeners","bind","items","forEach","listener","getAllItems","then","add","delete","item","addUpdateItem","deleteItem","clearUnsaved","saveDate","saveUnsaved","exportToJSON","obj","JSON","stringify","jsonText","res","importFromJSON","StorageContext","React","createContext","StorageProvider","Provider","ItemControls","props","storage","useContext","newItemStatesAndSetters","newItemName","name","setNewItemName","setName","quantity","setQuantity","unit","setUnit","comment","setComment","existing","setExisting","date","category","setCategory","nextList","masterList","masterItem","newList","find","push","id","className","htmlFor","type","list","aria-label","onChange","e","currentTarget","value","masterItems","findIndex","required","map","min","parseInt","cat","style","display","flexDirection","justifyContent","onClick","preventDefault","addUpdate","saved","setNewList","currList","matchItemIndex","listCopy","matchItem","setMasterList","currentSet","has","newSet","flexGrow","ItemDisplay","selected","width","fontStyle","color","removeItem","itemListToText","message","window","localStorage","getItem","itemsText","toLocaleDateString","length","sublists","Map","sub","get","set","categories","keys","sort","repeat","index","commentString","join","ItemList","useState","copied","setCopied","maxHeight","overflowY","copyList","navigator","clipboard","writeText","setTimeout","NewItemList","clearNewItemControls","marginTop","Date","setRunFetchEffect","disabled","NewList","nameToRemove","filter","oldItem","ListDisplay","setSelectedDate","toLocaleString","readOnly","PreviousLists","selectedDate","dateList","dateMap","date1","date2","valueOf","selectedItems","marginLeft","size","DataPage","setMessage","importStatus","setImportStatus","margin","placeholder","setItem","exportToJSONText","text","a","document","createElement","file","Blob","href","URL","createObjectURL","download","click","inp","getElementById","files","importFromJSONText","accept","cloneItem","getItemFromObject","DB_NAME","DB_SHOPPING_LIST_STORE_NAME","ShoppingDatabase","maxCount","Promise","resolve","reject","getReq","transaction","objectStore","getAll","onerror","event","console","debug","target","errorCode","onsuccess","result","keyRangeOnly","IDBKeyRange","only","getItemsWithDate","found","setReq","catch","reason","request","clear","oncomplete","getItemsSaved","clearItem","prevItem","itemClone","put","unSavedItem","newItem","jsonString","parse","Array","isArray","itemObj","repr","retVal","clearAll","i","storageDb","openDbReq","open","onupgradeneeded","tx","objectStoreNames","contains","listStore","indexNames","createIndex","unique","createObjectStore","keyPath","autoIncrement","onblocked","openDb","indexedDB","setDB","fetch","App","dbIsEmpty","setDBIsEmpty","setMasterItems","setDateMap","setDate","runFetchEffect","itemStatesAndSetters","useEffect","hasDB","dbListener","mList","nameToItem","currentList","dateMapTemp","dateItemList","values","addListener","removeListener","to","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.01fe2200.chunk.js","sourcesContent":["export const Units = new Set([\n    'Kg',\n    'gm',\n    'Packet(s)',\n    'No'\n]);\n\nexport const Categories = new Set([\n    'Vegetables',\n    'Fruits',\n    'Medicines',\n]);\n","import React from 'react'\nimport { Item } from '../types/item';\nimport { ShoppingDatabase } from '../storage/storageDefs';\n\nexport class StorageType {\n    private db: ShoppingDatabase | undefined = undefined;\n    private listeners = new Set<((x: Item[]) => void)>();\n    constructor(db?: ShoppingDatabase) {\n        this.db = db;\n        this.invokeListeners = this.invokeListeners.bind(this);\n    }\n\n    public setDB(db: ShoppingDatabase) {\n        this.db = db;\n    }\n\n    public hasDB(): boolean {\n        return !!this.db;\n    }\n\n    private invokeListeners(items: Item[]) {\n        // console.log('Invoking ' + this.masterListeners.size + ' master listeners.');\n        this.listeners.forEach((listener) => {\n            listener(items);\n        });\n    }\n\n    public fetch() {\n        if (!this.db)\n            return;\n\n        this.db.getAllItems().then(this.invokeListeners);\n    }\n\n    public addListener(listener: (x: Item[]) => void) {\n        this.listeners.add(listener);\n    }\n\n    public removeListener(listener: (x: Item[]) => void) {\n        this.listeners.delete(listener);\n    }\n\n    public addUpdate(item: Item) {\n        if (!this.db)\n            return;\n\n        this.db.addUpdateItem(item);\n    }\n\n    public delete(item: Item) {\n        if (!this.db)\n            return;\n\n        this.db.deleteItem(item);\n    }\n\n    public clearUnsaved() {\n        if (!this.db)\n            return;\n\n        return this.db.clearUnsaved();\n    }\n\n    public saveUnsaved(saveDate: Date) {\n        if (!this.db)\n            return;\n\n        return this.db.saveUnsaved(saveDate);\n    }\n\n    public async exportToJSONText() {\n        let obj;\n        try {\n            obj = await this.db?.exportToJSON();\n        } catch (e) {\n            return '';\n        }\n\n        return JSON.stringify(obj);\n    }\n\n    public async importFromJSONText(jsonText: string) {\n        let res = false;\n        try {\n            res = !! await this.db?.importFromJSON(jsonText);\n        } catch (e) {\n            return false;\n        }\n\n        return res;\n    }\n};\n\nexport const StorageContext = React.createContext({} as StorageType);\nexport const StorageProvider = StorageContext.Provider;","import React from \"react\";\nimport { useContext } from \"react\";\nimport { Categories, Units } from \"../consts/itemConsts\";\nimport { StorageContext } from \"../contexts/storage\";\nimport { Item, ItemStatesAndSetters } from '../types/item';\n\nimport '../styles/itemcontrols.css';\n\ntype ItemControlProps = {\n    masterList: Set<string>;\n    masterItems: Item[];\n    setMasterList: React.Dispatch<React.SetStateAction<Set<string>>>;\n    newList: Item[];\n    setNewList: React.Dispatch<React.SetStateAction<Item[]>>;\n    newItemStatesAndSetters: ItemStatesAndSetters;\n};\n\nexport function ItemControls(props: ItemControlProps) {\n    const storage = useContext(StorageContext)\n    let {\n        name: newItemName,\n        setName: setNewItemName,\n        quantity,\n        setQuantity,\n        unit,\n        setUnit,\n        comment,\n        setComment,\n        existing,\n        setExisting,\n        date,\n        category,\n        setCategory,\n    } = props.newItemStatesAndSetters;\n\n    let nextList:string[] = [];\n    props.masterList.forEach(masterItem => {\n        if (!props.newList.find(item => item.name === masterItem))\n            nextList.push(masterItem);\n    });\n\n    function handleNewItem(e: React.FormEvent<HTMLInputElement>) {\n        e.preventDefault();\n\n        if (!newItemName || !quantity || !unit)\n            return;\n\n        storage.addUpdate({name: newItemName, quantity, unit, comment, saved: 0, date, category});\n        props.setNewList(currList => {\n            let matchItemIndex = currList.findIndex((item) => item.name === newItemName);\n            if (matchItemIndex === -1) {\n                return [...currList, {name: newItemName, quantity, unit, comment, saved: 0, date, category}];\n            }\n\n            let listCopy = [...currList];\n            let matchItem = listCopy[matchItemIndex];\n            matchItem.quantity = quantity;\n            matchItem.unit = unit;\n            matchItem.comment = comment;\n            matchItem.category = category;\n            return listCopy;\n        });\n\n        props.setMasterList(currentSet => {\n            if (currentSet.has(newItemName))\n                return currentSet;\n            let newSet = new Set<string>(currentSet);\n            newSet.add(newItemName);\n            return newSet;\n        });\n        setNewItemName('');\n        setQuantity(0);\n        setUnit('');\n        setComment('');\n        setExisting(false);\n        setCategory(undefined);\n    }\n\n    function handleItemNameChange(e: React.FormEvent<HTMLInputElement>) {\n        setNewItemName(e.currentTarget.value);\n        let masterItem = props.masterItems.find((item) => item.name === e.currentTarget.value);\n        if (masterItem) {\n            setQuantity(masterItem.quantity);\n            setUnit(masterItem.unit);\n            setUnit(masterItem.unit);\n            setComment(masterItem.comment);\n            setCategory(masterItem.category);\n        }\n        setExisting(props.newList.findIndex((item) => item.name === e.currentTarget.value) !== -1);\n    }\n\n    function handleQtyChange(e: React.FormEvent<HTMLInputElement>) {\n        if (e.currentTarget.value === '') {\n            setQuantity(0);\n            return;\n        }\n        setQuantity(parseInt(e.currentTarget.value));\n    }\n\n    function handleUnitChange(e: React.FormEvent<HTMLInputElement>) {\n        setUnit(e.currentTarget.value);\n    }\n\n    function handleCommentsChange(e: React.FormEvent<HTMLInputElement>) {\n        setComment(e.currentTarget.value);\n    }\n\n    function handleClear() {\n        setNewItemName('');\n        setQuantity(0);\n        setUnit('');\n        setComment('');\n        setExisting(false);\n        setCategory(undefined);\n    }\n\n    function handleCategoryChange(e: React.FormEvent<HTMLInputElement>) {\n        setCategory(e.currentTarget.value === '' ? undefined : e.currentTarget.value);\n    }\n\n    return (\n        <form id=\"item-controls\">\n            <div className=\"mb-3\">\n                <label htmlFor=\"item-search\" className=\"form-label\">Item name</label>\n                <input type=\"search\" id=\"item-search\" className=\"form-control bottom-border-only\"\n                    list=\"next-item-list\"\n                    aria-label=\"Search through master list\"\n                    onChange={handleItemNameChange}\n                    value={newItemName}\n                    required></input>\n            </div>\n\n            <datalist id=\"next-item-list\">\n                {nextList.map(item => <option key={item} value={item}/>)}\n            </datalist>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"qty-input\" className=\"form-label\">Quantity</label>\n                <input type=\"number\" className=\"form-control bottom-border-only\"\n                    id=\"qty-input\"\n                    aria-label=\"Quantity\"\n                    min={1}\n                    required\n                    onChange={handleQtyChange}\n                    value={quantity === 0 ? '' : (quantity + '')}></input>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"unit-input\" className=\"form-label\">Unit</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"unit-input\"\n                    list=\"unit-list\"\n                    aria-label=\"Unit\"\n                    required\n                    onChange={handleUnitChange}\n                    value={unit}></input>\n            </div>\n\n            <datalist id=\"unit-list\">\n                {[...Units].map(unit => <option key={unit} value={unit}/>)}\n            </datalist>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"comments-input\" className=\"form-label\">Comments</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"comments-input\"\n                    aria-label=\"Comments\"\n                    onChange={handleCommentsChange}\n                    value={comment}></input>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"category-input\" className=\"form-label\">Category</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"category-input\"\n                    list=\"category-list\"\n                    aria-label=\"Unit\"\n                    required\n                    onChange={handleCategoryChange}\n                    value={category === undefined ? '' : category}></input>\n            </div>\n\n            <datalist id=\"category-list\">\n                {[...Categories].map(cat => <option key={cat} value={cat}/>)}\n            </datalist>\n\n            <br></br>\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\n                <input type=\"submit\" value={existing ? \"Modify\" : \"Add\"} className=\"btn btn-primary\"\n                    onClick={handleNewItem} style={{flexGrow: 0.40}}></input>\n                <input type=\"button\" value=\"Clear\" className=\"btn btn-danger\"\n                    onClick={handleClear} style={{flexGrow: 0.40}}></input>\n            </div>\n        </form>\n    );\n};\n","import React from 'react';\nimport { Item, ItemStatesAndSetters } from \"../types/item\";\n\nexport function ItemDisplay(props: {\n    item: Item,\n    newItemStatesAndSetters?: ItemStatesAndSetters,\n    removeItem?: (x: Item) => void\n}) {\n    const handleItemClick = () => {\n        if (!props.newItemStatesAndSetters)\n            return;\n\n        props.newItemStatesAndSetters.setName(props.item.name);\n        props.newItemStatesAndSetters.setQuantity(props.item.quantity);\n        props.newItemStatesAndSetters.setUnit(props.item.unit);\n        props.newItemStatesAndSetters.setComment(props.item.comment);\n        props.newItemStatesAndSetters.setExisting(true);\n        props.newItemStatesAndSetters.setCategory(props.item.category);\n    };\n\n    let selected = props.newItemStatesAndSetters ? (props.newItemStatesAndSetters.name === props.item.name) : false;\n    const removeItem = () => {\n        if (props.removeItem)\n            props.removeItem(props.item);\n    };\n    return (\n        <li className={\"list-group-item d-flex justify-content-between align-items-start\" + (selected ? \" active\" : \"\")}>\n            <div className=\"ms-2 me-auto\" style={{width: \"100vw\"}} onClick={handleItemClick}>\n                <div className=\"fw-bold\" style={{display: \"inline\"}}>{props.item.name + (props.item.comment ? ' (' + props.item.comment + ')' : '')}</div>\n                <div>{props.item.quantity}&nbsp;{props.item.unit}&nbsp;\n                    { (props.item.category !== undefined) && <small style={{fontStyle: \"italic\", color: \"red\"}}>{'#' + props.item.category}</small> }</div>\n            </div>\n            {props.removeItem && <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={removeItem}></button>}\n        </li>\n    );\n}","import { useContext, useState } from \"react\";\nimport { Item, ItemStatesAndSetters } from '../types/item';\nimport { ItemDisplay } from '../components/ItemDisplay';\nimport { StorageContext } from '../contexts/storage';\n\nimport '../styles/newitemlist.css';\n\nconst itemListToText = (list: Item[]): string => {\n    let message = window.localStorage.getItem('settings_message');\n    let itemsText: string[] = !message ? [`${list[0].date.toLocaleDateString()}`, `${list.length} items`, ''] :\n        [message, ''];\n\n    let sublists = new Map<string, Item[]>();\n    const cat2String = (category: string | undefined) => category === undefined ? '' : category;\n    list.forEach(item => {\n        const cat = cat2String(item.category);\n        const sub = sublists.get(cat);\n        if (sub)\n            sub.push(item);\n        else\n            sublists.set(cat, [item]);\n    });\n\n    let categories = [...sublists.keys()];\n    categories.sort();\n\n    categories.forEach((cat: string) => {\n        if (cat === '') {\n            itemsText.push('');\n        } else {\n            itemsText.push('');\n            itemsText.push(cat);\n            itemsText.push('='.repeat(cat.length));\n        }\n\n        const items = sublists.get(cat) as Item[];\n        items.forEach((item, index) => {\n            let commentString = item.comment ? ` (${item.comment})` : '';\n            itemsText.push(`${index + 1}. ${item.name}${commentString} : ${item.quantity} ${item.unit}`);\n        });\n    });\n\n    return itemsText.join('\\n');\n}\n\nexport function ItemList(props: {\n    list: Item[],\n    copyList?: boolean,\n    removeItem?: ((x: Item) => void),\n    newItemStatesAndSetters?: ItemStatesAndSetters\n}) {\n\n    let [copied, setCopied] = useState(false);\n\n    const handleCopy = () => {\n        navigator.clipboard.writeText(itemListToText(props.list))\n            .then(() => {\n                setCopied(true);\n                setTimeout(() => {\n                    setCopied(false);\n                }, 1000);\n            });\n    };\n\n    return (\n        <div>\n            <ol className=\"list-group list-group-flush list-group-numbered\" style={{maxHeight: \"80vh\", overflowY:\"auto\"}}>\n                {props.list.map(item =>\n                    <ItemDisplay item={item} key={item.name}\n                        newItemStatesAndSetters={props.newItemStatesAndSetters}\n                        removeItem={props.removeItem}/>)}\n            </ol>\n            <br/>\n            {\n                props.copyList && props.list.length > 0 &&\n                <input type=\"button\" value={copied ? 'Copied!' : 'Copy list'} className={\"btn \" + (copied ? \"btn-success\" : \"btn-primary\")}\n                    onClick={handleCopy}/>\n            }\n        </div>\n    );\n}\n\nexport function NewItemList(props: {\n    list: Item[],\n    removeItem: (x: Item) => void,\n    newItemStatesAndSetters: ItemStatesAndSetters,\n    setRunFetchEffect: (flag: boolean) => void\n}) {\n    const storage = useContext(StorageContext);\n\n    const clearNewItemControls = () => {\n        props.newItemStatesAndSetters.setName('');\n        props.newItemStatesAndSetters.setQuantity(0);\n        props.newItemStatesAndSetters.setUnit('');\n        props.newItemStatesAndSetters.setComment('');\n        props.newItemStatesAndSetters.setExisting(false);\n        props.newItemStatesAndSetters.setCategory(undefined);\n    };\n\n    const handleClear = () => {\n        if (props.list.length === 0)\n            return;\n\n        storage.clearUnsaved()?.then(() => {\n            clearNewItemControls();\n            props.setRunFetchEffect(true);\n        })\n    };\n\n    const handleSave = () => {\n        if (props.list.length === 0)\n            return;\n\n        const saveDate = new Date();\n        storage.saveUnsaved(saveDate)?.then(() => {\n            clearNewItemControls();\n            props.setRunFetchEffect(true);\n        });\n\n        navigator.clipboard.writeText(itemListToText(props.list));\n    };\n\n    return (\n        <div id=\"new-item-list-wrapper\">\n            <p>Shopping list({props.list.length})</p>\n            <ItemList list={props.list} newItemStatesAndSetters={props.newItemStatesAndSetters}\n                removeItem={props.removeItem}/>\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 10}}>\n                <input type=\"button\" value=\"Save and Copy\" className=\"btn btn-primary\"\n                    onClick={handleSave} style={{flexGrow: 0.40}} disabled={props.list.length === 0}></input>\n                <input type=\"button\" value=\"Clear\" className=\"btn btn-danger\"\n                    onClick={handleClear} style={{flexGrow: 0.40}} disabled={props.list.length === 0}></input>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport { Item, ItemStatesAndSetters } from '../types/item';\nimport { ItemControls } from \"../components/ItemControls\";\nimport { DebugItemLists } from \"../components/DebugItemLists\";\nimport { NewItemList } from '../components/ItemList';\nimport { useContext } from \"react\";\nimport { StorageContext } from \"../contexts/storage\";\n\nimport \"../styles/newlist.css\";\n\nexport function NewList(props: {\n    masterList: Set<string>;\n    masterItems: Item[];\n    setMasterList: React.Dispatch<React.SetStateAction<Set<string>>>;\n    newList: Item[];\n    setNewList: React.Dispatch<React.SetStateAction<Item[]>>;\n    newItemStatesAndSetters: ItemStatesAndSetters;\n    runFetchEffect: boolean;\n    setRunFetchEffect: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n    const storage = useContext(StorageContext);\n    let {\n        name,\n        setName,\n        setQuantity,\n        setUnit,\n        setComment,\n        setExisting,\n        setCategory,\n    } = props.newItemStatesAndSetters;\n\n    const removeItem = (item: Item) => {\n        const nameToRemove = item.name;\n        const list = props.newList.filter(oldItem => oldItem.name !== nameToRemove);\n        storage.delete(item);\n        props.setNewList(list);\n        if (name === nameToRemove) {\n            setName('');\n            setQuantity(0);\n            setUnit('');\n            setComment('');\n            setExisting(false);\n            setCategory(undefined);\n        }\n    };\n\n    let debugMode = false;\n\n    return (\n        <div id=\"newlist-wrapper\">\n            <ItemControls masterList={props.masterList} setMasterList={props.setMasterList}\n                newList={props.newList} setNewList={props.setNewList}\n                masterItems={props.masterItems} newItemStatesAndSetters={props.newItemStatesAndSetters}/>\n            <div className=\"sepline\"></div>\n            <NewItemList list={props.newList} newItemStatesAndSetters={props.newItemStatesAndSetters}\n                removeItem={removeItem} setRunFetchEffect={props.setRunFetchEffect}/>\n            {debugMode && <DebugItemLists masterList={props.masterList} newList={props.newList} />}\n            <br></br>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Item } from '../types/item';\n\nexport function ListDisplay(props: {\n    date: number,\n    items: Item[],\n    selected: boolean;\n    setSelectedDate: React.Dispatch<React.SetStateAction<number>>;\n    readOnly: boolean;\n}) {\n    const handleListClick = () => {\n        props.setSelectedDate(props.date);\n    };\n\n    const removeList = () => {\n        // TODO: remove from items from db and re-fetch.\n    };\n\n    return (\n        <li className={\"list-group-item d-flex justify-content-between align-items-start\" + (props.selected ? \" active\" : \"\")}>\n            <div className=\"ms-2 me-auto\" style={{width: \"100vw\"}} onClick={handleListClick}>\n                <div className=\"fw-bold\" style={{display: \"inline\"}}>{new Date(props.date).toLocaleString()}</div>\n                <div>{props.items.length}&nbsp;items</div>\n            </div>\n            {!props.readOnly && <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={removeList}></button> }\n        </li>\n    );\n}","import React from \"react\";\nimport { Item } from '../types/item';\nimport { ListDisplay  } from \"../components/ListDisplay\";\nimport { ItemList } from \"../components/ItemList\";\nimport { useState } from \"react\";\n\nimport \"../styles/previouslists.css\";\n\nexport function PreviousLists(props: {\n    dateMap: Map<number, Item[]>;\n}) {\n    let [selectedDate, setSelectedDate] = useState<number>(0);\n    const dateList = [...props.dateMap.keys()].sort((date1, date2) => date2.valueOf() - date1.valueOf());\n    const selectedItems = props.dateMap.get(selectedDate);\n    return (\n        <div style={{marginLeft: 10, width: \"90%\"}}>\n            <p>Previous shopping lists({props.dateMap.size})</p>\n            <div id=\"previous-lists-wrapper\">\n                <div>\n                    <ol id=\"previous-lists\" className=\"list-group list-group-flush list-group-numbered\">\n                        { dateList.map(date =>\n                            <ListDisplay date={date} items={props.dateMap.get(date) || []}\n                                key={date} selected={date === selectedDate} setSelectedDate={setSelectedDate} readOnly={true}/> )}\n                    </ol>\n                </div>\n                { dateList.length !== 0 && <div className=\"sepline\"></div> }\n                <div id=\"previous-list-one\">\n                    { (selectedDate !== 0 && selectedItems !== undefined) && <ItemList list={selectedItems} copyList={true}/> }\n                </div>\n            </div>\n            <br></br>\n        </div>\n    );\n}","import { useContext, useState } from \"react\";\nimport { StorageContext } from \"../contexts/storage\";\n\nimport '../styles/datapage.css'\n\nfunction DataPage(props: {\n    setRunFetchEffect: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n    let [name, setName] = useState(window.localStorage.getItem('settings_name'));\n    let [message, setMessage] = useState(window.localStorage.getItem('settings_message'));\n    let [importStatus, setImportStatus] = useState(0);\n\n    const storage = useContext(StorageContext);\n\n    function handleNameChange(e: React.FormEvent<HTMLInputElement>) {\n        setName(e.currentTarget.value)\n    }\n\n    function handleMessageChange(e: React.FormEvent<HTMLTextAreaElement>) {\n        setMessage(e.currentTarget.value);\n    }\n\n    function handleSave() {\n        if (name) {\n            window.localStorage.setItem('settings_name', name);\n        }\n\n        if (message) {\n            window.localStorage.setItem('settings_message', message);\n        }\n    }\n\n    function handleClear() {\n        window.localStorage.removeItem('settings_name');\n        window.localStorage.removeItem('settings_message');\n        setName('');\n        setMessage('');\n    }\n\n    function handleExport() {\n        storage.exportToJSONText().then(function (text) {\n            let a = document.createElement(\"a\");\n            let file = new Blob([text], {type: 'text/plain'});\n            a.href = URL.createObjectURL(file);\n            a.download = 'shopping-list-export-' + (new Date()).toLocaleDateString() + '.json';\n            a.click();\n        });\n    }\n\n    function handleImport() {\n        let inp = document.getElementById('importFile');\n        inp?.click();\n    }\n\n    function handleImportFile() {\n        let inp = document.getElementById('importFile') as HTMLInputElement;\n        if (!inp || !inp.files || !inp.files.length)\n            return;\n        inp.files[0].text().then(function (jsonText) {\n            return storage.importFromJSONText(jsonText);\n        }).then((res: boolean) => {\n            if (res) {\n                onLocalStorageChanged();\n                props.setRunFetchEffect(true);\n            }\n            setImportStatus(res ? 1 : -1);\n            setTimeout(() => {\n                setImportStatus(0);\n            }, 1000);\n            return true;\n        });\n    }\n\n    function onLocalStorageChanged() {\n        setName(window.localStorage.getItem('settings_name'));\n        setMessage(window.localStorage.getItem('settings_message'))\n    }\n\n    return (\n        <form id=\"settings-form\" style={{margin: 20}}>\n            <div className=\"mb-3\">\n                <label htmlFor=\"settings-name\" className=\"form-label\">Name</label>\n                <input type=\"text\" id=\"settings-name\" className=\"form-control\"\n                    aria-label=\"Your name\"\n                    placeholder=\"Your name\"\n                    onChange={handleNameChange}\n                    value={name ? name : ''}>\n                </input>\n            </div>\n            <div className=\"mb-3\">\n                <label htmlFor=\"settings-message\" className=\"form-label\">Custom message for delivery</label>\n                <textarea id=\"settings-message\" className=\"form-control\"\n                    aria-label=\"Your message\"\n                    placeholder=\"Your message\"\n                    onChange={handleMessageChange}\n                    value={message ? message : ''}>\n                </textarea>\n            </div>\n            <br></br>\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\n                <input type=\"submit\" value={\"Save\"} className=\"btn btn-success\"\n                    onClick={handleSave} style={{flexGrow: 0.40}}></input>\n                <input type=\"button\" value=\"Clear\" className=\"btn btn-danger\"\n                    onClick={handleClear} style={{flexGrow: 0.40}}></input>\n            </div>\n            <br></br>\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\n                <input type=\"button\" value={\"Export\"} className=\"btn btn-primary\"\n                        onClick={handleExport} style={{flexGrow: 0.40}}></input>\n                <input type=\"button\" value={importStatus === 0 ? \"Import\" : (importStatus === -1 ? \"Import failed!\" : \"Import successful!\")}\n                        className=\"btn btn-primary\"\n                        onClick={handleImport} style={{flexGrow: 0.40}}></input>\n                <input type=\"file\" id=\"importFile\" onChange={handleImportFile}\n                    style={{display: \"none\"}} accept=\".json\"></input>\n            </div>\n        </form>\n    );\n}\n\nexport default DataPage;","export type BooleanNumber = 0 | 1;\n\nexport type Item = {\n    name: string;\n    quantity: number;\n    unit: string;\n    comment: string;\n    date: Date;\n    saved: BooleanNumber;\n    category: string | undefined;\n};\n\nexport type ItemStatesAndSetters = {\n    name: string;\n    setName: (name: string) => void;\n    quantity: number;\n    setQuantity: (qty: number) => void;\n    unit: string;\n    setUnit: (unit: string) => void;\n    comment: string;\n    setComment: (comment: string) => void;\n    date: Date;\n    setDate: (date: Date) => void;\n    existing: boolean;\n    setExisting: (val: boolean) => void;\n    category: string | undefined;\n    setCategory: (category: string | undefined) => void;\n}\n\nexport function cloneItem(item: Item): Item {\n    return {\n        name: item.name,\n        quantity: item.quantity,\n        unit: item.unit,\n        comment: item.comment,\n        date: item.date,\n        saved: item.saved,\n        category: item.category\n    };\n}\n\nexport type JSONRepresentationType = {\n    items: Item[];\n    name: string;\n    message: string;\n}\n\nexport function getItemFromObject(obj: any): Item | undefined {\n    if (typeof obj !== 'object')\n        return undefined;\n\n    if (typeof obj.name !== 'string' ||\n        typeof obj.quantity !== 'number' ||\n        typeof obj.unit !== 'string' ||\n        typeof obj.comment !== 'string' ||\n        typeof obj.date !== 'string' ||\n        typeof obj.saved !== 'number' ||\n        (typeof obj.category !== 'string' && typeof obj.category !== 'undefined'))\n        return undefined;\n\n    return {\n        name: obj.name,\n        quantity: obj.quantity,\n        unit: obj.unit,\n        comment: obj.comment,\n        date: new Date(obj.date),\n        saved: obj.saved,\n        category: obj.category,\n    }\n}\n\nexport interface StorageMin {\n    clear(): void;\n    getItem(key: string): string | null;\n    removeItem(key: string): void;\n    setItem(key: string, value: string): void;\n}","import { Item, cloneItem, BooleanNumber, JSONRepresentationType, getItemFromObject, StorageMin } from '../types/item';\n\nconst DB_NAME = 'shopping-list-app-db';\nconst DB_VERSION = 3;\nconst DB_SHOPPING_LIST_STORE_NAME = 'shopping-list-store';\n\nexport class ShoppingDatabase {\n    private db: IDBDatabase;\n    constructor (db: IDBDatabase) {\n        this.db = db;\n    }\n\n    getAllItems(maxCount: number = -1) {\n        return new Promise((resolve: (x: Item[]) => void, reject) => {\n            let objectStore = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME).objectStore(DB_SHOPPING_LIST_STORE_NAME);\n            let getReq = objectStore.getAll(null, maxCount > 0 ? maxCount : undefined);\n            getReq.onerror = function(event: Event) {\n                console.debug('getAllItems getAll() failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' getAll: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            };\n\n            getReq.onsuccess = function(this: IDBRequest<any[]>) {\n                console.debug('getAllItems: getAll() succeeded.');\n                resolve(this.result);\n            };\n        });\n    }\n\n    getItemsWithDate(date: Date, keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only, transaction?: IDBTransaction) {\n        return new Promise((resolve: (items: Item[]) => void, reject) => {\n            let objectStore = (transaction ? transaction : this.db.transaction(DB_SHOPPING_LIST_STORE_NAME))\n                .objectStore(DB_SHOPPING_LIST_STORE_NAME);\n            let getReq = objectStore.index('date').getAll(keyRangeOnly(date));\n\n            getReq.onerror = function(event: Event) {\n                console.debug('getItemsWithDate .index(\"date\").getAll() failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' index(\"date\").getAll: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            }\n\n            getReq.onsuccess = function(this: IDBRequest<any[]>) {\n                console.debug('getItemsWithDate .index(\"date\").getAll() succeeded');\n                resolve(this.result);\n            }\n        });\n    }\n\n    getItemsSaved(saved: BooleanNumber, keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only, transaction?: IDBTransaction) {\n        return new Promise((resolve: (items: Item[]) => void, reject) => {\n            let objectStore = (transaction ? transaction : this.db.transaction(DB_SHOPPING_LIST_STORE_NAME))\n                .objectStore(DB_SHOPPING_LIST_STORE_NAME);\n            let getReq = objectStore.index('saved').getAll(keyRangeOnly(saved));\n\n            getReq.onerror = function(event: Event) {\n                console.debug('getItemsSaved .index(\"date\").getAll() failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' index(\"date\").getAll: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            }\n\n            getReq.onsuccess = function(this: IDBRequest<any[]>) {\n                console.debug('getItemsSaved .index(\"date\").getAll() succeeded');\n                resolve(this.result);\n            }\n        });\n    }\n\n    deleteItem(item: Item, keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only) {\n        const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, \"readwrite\");\n        let objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n        return this.getItemsWithDate(item.date, keyRangeOnly, transaction).then((items) => {\n            return new Promise((resolve, reject) => {\n                console.debug('deleteItem: getItemsWithDate succeeded');\n                let found = false;\n                const onerror = (event: Event) => {\n                    console.debug('deleteItem add/update failed');\n                    reject(DB_SHOPPING_LIST_STORE_NAME + ' add/update failed: errCode' +\n                        event && event.target ? (event.target as any).errorCode : 'unknown');\n                }\n\n                const onsuccess = function() {\n                    console.debug('deleteItem: add/update succeeded.');\n                    resolve(undefined);\n                }\n\n                items.forEach(function(matchItem: any) {\n                    if (!found && matchItem.name === item.name && matchItem.saved === item.saved) {\n                        console.debug('deleteItem: found a matching item, deleting it...');\n                        let setReq = objectStore.delete(keyRangeOnly(matchItem.id));\n                        setReq.onerror = onerror;\n                        setReq.onsuccess = onsuccess;\n                        found = true;\n                    }\n                });\n\n                if (!found) {\n                    console.debug('warning: deleteItem no matching entry.');\n                    resolve(undefined);\n                }\n            });\n        }).catch((reason: any) => {\n            console.debug('deleteItem: getItemsWithDate() failed');\n            return Promise.reject(DB_SHOPPING_LIST_STORE_NAME + ' getItemsWithDate: reason ' + reason);\n        });;\n    }\n\n    clearAll() {\n        return new Promise((resolve, reject) => {\n            let request = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, \"readwrite\")\n                .objectStore(DB_SHOPPING_LIST_STORE_NAME).clear();\n            request.onerror = function(event: Event) {\n                console.debug('clearAll: clear() failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' clear: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            }\n\n            request.onsuccess = function(this: IDBRequest<undefined>) {\n                console.debug('clearAll: clear() succeeded');\n                resolve(this.result);\n            }\n        });\n    }\n\n    clearUnsaved(keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only) {\n        const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, \"readwrite\");\n        let objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n        return new Promise<undefined>((resolve, reject) => {\n            transaction.onerror = (event: Event) => {\n                console.debug('clearUnsaved: clear() failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' clear: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            };\n\n            transaction.oncomplete = function() {\n                console.debug('clearUnsaved: clear() succeeded');\n                resolve(undefined);\n            };\n\n            this.getItemsSaved(0, keyRangeOnly, transaction).then((items: Item[]) => {\n                items.forEach(function(clearItem: any) {\n                    objectStore.delete(keyRangeOnly(clearItem.id));\n                });\n            }); // catch is not necessary, it will reject in transaction.onerror().\n        });\n    }\n\n    addUpdateItem(item: Item, keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only) {\n        const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, \"readwrite\");\n        let objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n        return this.getItemsWithDate(item.date, keyRangeOnly, transaction).then((items: Item[]) => {\n            return new Promise((resolve, reject) => {\n                console.debug('addUpdateItem: getItemsWithDate succeeded');\n                let found = false;\n                const onerror = (event: Event) => {\n                    console.debug('addUpdateItem add/update failed');\n                    reject(DB_SHOPPING_LIST_STORE_NAME + ' add/update failed: errCode' +\n                        event && event.target ? (event.target as any).errorCode : 'unknown');\n                }\n\n                const onsuccess = function(this: IDBRequest<IDBValidKey>) {\n                    console.debug('addUpdateItem: add/update succeeded.');\n                    resolve(this.result);\n                }\n\n                items.forEach(function(prevItem: any) {\n                    if (!found && prevItem.name === item.name) {\n                        console.debug('addUpdateItem: found a matching item, updating it...');\n                        let itemClone = cloneItem(item) as any;\n                        itemClone.id = prevItem.id;\n                        let setReq = objectStore.put(itemClone);\n                        setReq.onerror = onerror;\n                        setReq.onsuccess = onsuccess;\n                        found = true;\n                    }\n                });\n\n                if (!found) {\n                    console.debug('addUpdateItem no matching entry yet');\n                    let setReq = objectStore.add(item);\n                    setReq.onerror = onerror;\n                    setReq.onsuccess = onsuccess;\n                    return;\n                }\n            });\n        }).catch((reason: any) => {\n            console.debug('addUpdateItem: getItemsWithDate() failed');\n            return Promise.reject(DB_SHOPPING_LIST_STORE_NAME + ' getItemsWithDate: reason ' + reason);\n        });\n    }\n\n    saveUnsaved(date: Date, keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only) {\n        const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, \"readwrite\");\n        let objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n        return new Promise<undefined>((resolve, reject) => {\n            transaction.onerror = (event: Event) => {\n                console.debug('saveUnsaved: transaction failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' transaction: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            };\n\n            transaction.oncomplete = function() {\n                console.debug('saveUnsaved: transaction succeeded');\n                resolve(undefined);\n            };\n\n            this.getItemsSaved(0, keyRangeOnly, transaction).then((items: Item[]) => {\n                items.forEach(function(unSavedItem: Item) {\n                    const newItem = cloneItem(unSavedItem);\n                    newItem.date = date;\n                    newItem.saved = 1;\n                    objectStore.put(newItem);\n                });\n                items.forEach(function(unSavedItem: any) {\n                    objectStore.delete(keyRangeOnly(unSavedItem.id));\n                });\n            }); // catch is not necessary, it will reject in transaction.onerror().\n        });\n    }\n\n    public async exportToJSON(localStorage: StorageMin = window.localStorage) {\n        try {\n            const items = await this.getAllItems();\n            return {\n                items: items,\n                name: localStorage.getItem('settings_name') || '',\n                message: localStorage.getItem('settings_message') || '',\n            };\n        } catch (e) {\n            return {\n                items: [],\n                name: '',\n                message: '',\n            };\n        }\n    }\n\n    public async importFromJSON(jsonString: string,\n        keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only,\n        localStorage: StorageMin = window.localStorage) {\n\n        let obj;\n\n        try {\n            obj = JSON.parse(jsonString);\n        } catch (e) {\n            // console.log('JSON parse error: ' + e);\n            return false;\n        }\n\n        if (typeof obj !== 'object')\n            return false;\n\n        if (!Array.isArray(obj.items))\n            return false;\n\n        let items: Item[] = [];\n        (obj.items as any[]).forEach(itemObj => {\n            const item = getItemFromObject(itemObj);\n            if (item)\n                items.push(item);\n        });\n\n        const repr: JSONRepresentationType = {\n            items: items,\n            name: typeof obj.name === 'string' ? obj.name : '',\n            message: typeof obj.message === 'string' ? obj.message : '',\n        }\n\n        let retVal = false;\n\n        if (items.length) {\n            await this.clearAll();\n            for (let i = 0; i < items.length; ++i) {\n                try {\n                    await this.addUpdateItem(items[i], keyRangeOnly);\n                } catch (e) {\n                    console.debug('Error adding item : ' + items[i] + ' err = ' + e);\n                    return false;\n                }\n            }\n            retVal = true;\n        }\n\n        if (repr.name !== '') {\n            localStorage.setItem('settings_name', repr.name);\n            retVal = true;\n        }\n        if (repr.message !== '') {\n            localStorage.setItem('settings_message', repr.message);\n            retVal = true;\n        }\n\n        return retVal;\n    }\n}\n\nexport const openDb = (storageDb: IDBFactory, beSilent: boolean = false) => {\n    if (beSilent) {\n        console.debug = () => {};\n    }\n    return new Promise(function(resolve: (db: ShoppingDatabase) => any, reject) {\n        console.debug('Opening DB: ' + DB_NAME);\n        var openDbReq = storageDb.open(DB_NAME, DB_VERSION);\n        openDbReq.onsuccess = function(this: IDBRequest<IDBDatabase>) {\n            console.debug('Opened DB: ' + DB_NAME);\n            resolve(new ShoppingDatabase(this.result));\n        };\n        openDbReq.onerror = function(event: Event) {\n            reject('openDb failed errCode: ' +\n                event && event.target ? (event.target as any).errorCode : 'unknown');\n        };\n        openDbReq.onupgradeneeded = function (event: Event) {\n            console.debug(\"openDb.onupgradeneeded : \" + DB_NAME);\n            if (!event || !event.currentTarget || !(event.currentTarget as any).result) {\n                console.debug(\"openDb.onupgradeneeded : \" + DB_NAME + ' no new db in event!');\n                reject('onupgradeneeded: no new db!');\n                return;\n            }\n            const db: IDBDatabase = (event.currentTarget as any).result;\n            const tx: IDBTransaction = (event.target as any).transaction;\n\n            if (!db.objectStoreNames.contains(DB_SHOPPING_LIST_STORE_NAME)) {\n                let listStore = db.createObjectStore(DB_SHOPPING_LIST_STORE_NAME,\n                    { keyPath: 'id', autoIncrement: true});\n                listStore.createIndex('date', 'date', { unique: false });\n                listStore.createIndex('saved', 'saved', { unique: false });\n            } else {\n                let listStore = tx.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n                if(!listStore.indexNames.contains('saved')) {\n                    listStore.createIndex('saved', 'saved', { unique: false });\n                }\n            }\n        };\n        openDbReq.onblocked = function () {\n            console.debug(\"openDb.onupgradeneeded : \" + DB_NAME + ' blocked on other tabs');\n            reject('openDb upgrade: close other tabs and try again.');\n        }\n    });\n}","import React from 'react';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport './bootstrap.min.css';\nimport './styles/navbar.css';\nimport './styles/buttons.css';\nimport './styles/list.css';\nimport { useState } from \"react\";\nimport { Item, ItemStatesAndSetters } from './types/item';\nimport { useEffect } from \"react\";\n\n\nimport { NewList } from './pages/NewList';\nimport { PreviousLists } from  './pages/PreviousLists';\nimport DataPage from './pages/DataPage';\nimport { openDb } from './storage/storageDefs';\nimport { StorageType, StorageProvider } from './contexts/storage';\n\nlet storage = new StorageType();\n\n(function() {\n    openDb(indexedDB).then((db) => {\n      storage.setDB(db);\n      storage.fetch();\n    });\n})();\n\nfunction App() {\n  let [masterList, setMasterList] = useState(new Set<string>([]));\n  let [dbIsEmpty, setDBIsEmpty] = useState(false);\n  let [masterItems, setMasterItems] = useState([] as Item[]);\n  let [newList, setNewList] = useState<Item[]>([]);\n  let [dateMap, setDateMap] = useState<Map<number, Item[]>>(new Map<number, Item[]>());\n  let [name, setName] = useState('');\n  let [quantity, setQuantity] = useState(0);\n  let [unit, setUnit] = useState('');\n  let [comment, setComment] = useState('');\n  let [date, setDate] = useState(new Date());\n  let [category, setCategory] = useState(undefined as (string | undefined));\n  let [existing, setExisting] = useState(false);\n  let [runFetchEffect, setRunFetchEffect] = useState(false);\n  let itemStatesAndSetters: ItemStatesAndSetters = {\n      name,\n      setName,\n      quantity,\n      setQuantity,\n      unit,\n      setUnit,\n      comment,\n      setComment,\n      existing,\n      setExisting,\n      date,\n      setDate,\n      category,\n      setCategory,\n  };\n\n  // fetch initial state from DB.\n  useEffect(() => {\n      if (!runFetchEffect && (masterList.size || dbIsEmpty)) {\n          return;\n      }\n\n      if (storage.hasDB()) {\n          // console.log('Fetching...');\n          storage.fetch();\n      }\n\n      const dbListener = (mList: Item[]) => {\n          if (runFetchEffect)\n              setRunFetchEffect(false);\n          setDBIsEmpty((mList.length === 0));\n          setMasterList(new Set<string>(mList.map(item => item.name)));\n          const nameToItem = new Map<string, Item>();\n          const currentList: Item[] = [];\n          const dateMapTemp = new Map<number, Item[]>();\n          mList.forEach((item) => {\n              if (!item.saved)\n                  currentList.push(item);\n\n              let prevItem = nameToItem.get(item.name);\n              if (!prevItem)\n                  nameToItem.set(item.name, item);\n              else if (prevItem.date < item.date)\n                  nameToItem.set(item.name, item);\n\n              if (item.saved) {\n                const dateItemList = dateMapTemp.get(item.date.valueOf());\n                if (!dateItemList)\n                  dateMapTemp.set(item.date.valueOf(), [item]);\n                else\n                  dateItemList.push(item);\n              }\n          });\n          setMasterItems([...nameToItem.values()]);\n          setNewList(currentList);\n          if (currentList.length) {\n              setDate(currentList[0].date);\n          }\n          setDateMap(dateMapTemp);\n      };\n      storage.addListener(dbListener);\n\n      return function cleanup() {\n          storage.removeListener(dbListener);\n      };\n  });\n\n  return (\n    <HashRouter>\n      <div>\n        <nav>\n          <ul className=\"nav\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">New list</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/previous\" className=\"nav-link\">Previous lists</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/data\" className=\"nav-link\">Data</Link>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"nav-space\"></div>\n        <br></br>\n\n        <StorageProvider value={storage}>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/data\">\n              <DataPage setRunFetchEffect={setRunFetchEffect}/>\n            </Route>\n            <Route path=\"/previous\">\n                <PreviousLists dateMap={dateMap}/>\n            </Route>\n            <Route path=\"/\">\n                <NewList masterList={masterList} setMasterList={setMasterList}\n                  newList={newList} setNewList={setNewList}\n                  masterItems={masterItems} newItemStatesAndSetters={itemStatesAndSetters}\n                  runFetchEffect={runFetchEffect} setRunFetchEffect={setRunFetchEffect}/>\n            </Route>\n          </Switch>\n        </StorageProvider>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}