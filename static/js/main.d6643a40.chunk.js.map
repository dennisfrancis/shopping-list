{"version":3,"sources":["consts/itemConsts.ts","contexts/storage.ts","components/ItemDisplay.tsx","components/ItemControls.tsx","types/item.ts","components/ItemList.tsx","pages/NewList.tsx","components/ListDisplay.tsx","pages/PreviousLists.tsx","pages/DataPage.tsx","storage/storageDefs.ts","App.tsx","index.tsx"],"names":["Units","Set","Categories","StorageType","db","undefined","listeners","this","invokeListeners","bind","items","forEach","listener","getAllItems","then","add","delete","item","addUpdateItem","deleteItem","clearUnsaved","Promise","saveDate","saveUnsaved","exportToJSON","obj","JSON","stringify","jsonText","res","importFromJSON","StorageContext","React","createContext","StorageProvider","Provider","ItemDisplay","props","selected","newItemStatesAndSetters","name","className","disabled","style","width","onClick","setName","setQuantity","quantity","setUnit","unit","setComment","comment","setExisting","setCategory","category","setSearchListVisible","display","fontStyle","color","removeItem","type","aria-label","ItemControls","storage","useContext","newItemName","setNewItemName","existing","date","nextList","masterList","masterItem","newList","find","push","id","htmlFor","list","onChange","e","currentTarget","value","masterItems","findIndex","onContextMenu","preventDefault","required","map","min","qty","parseFloat","Math","round","cat","flexDirection","justifyContent","addUpdate","saved","setNewList","currList","matchItemIndex","listCopy","matchItem","setMasterList","currentSet","has","newSet","flexGrow","ItemSearchList","itemListDiv","useRef","useLayoutEffect","current","scrollTop","searchYPosition","itemDisplayList","ref","height","overflowY","onScroll","setSearchYPosition","cloneItem","getItemFromObject","objSrc","Date","itemListToText","message","window","localStorage","getItem","itemsText","toLocaleDateString","length","sublists","Map","sub","get","set","categories","keys","sort","repeat","index","commentString","join","ItemList","useState","copied","setCopied","history","useHistory","copyList","navigator","clipboard","writeText","setTimeout","newDate","outMap","outList","NewItemList","clearNewItemControls","marginTop","setRunFetchEffect","NewList","searchListVisible","nameToRemove","filter","oldItem","ListDisplay","setSelectedDate","toLocaleString","readOnly","PreviousLists","selectedDate","dateMap","dateList","date1","date2","valueOf","selectedItems","marginLeft","size","thisDate","DataPage","setMessage","importStatus","setImportStatus","importButtonText","settingsNameId","exportToJSONText","text","a","document","createElement","file","Blob","href","URL","createObjectURL","download","click","marginBottom","inp","getElementById","files","importFromJSONText","accept","placeholder","rows","setItem","DB_NAME","DB_SHOPPING_LIST_STORE_NAME","ShoppingDatabase","maxCount","resolve","reject","getReq","transaction","objectStore","getAll","onerror","event","console","debug","Error","error","onsuccess","result","keyRangeOnly","IDBKeyRange","only","getItemsWithDate","found","setReq","catch","reason","request","clear","oncomplete","getItemsSaved","clearItem","prevItem","itemClone","put","unSavedItem","newItem","jsonString","parse","Array","isArray","itemObj","repr","retVal","clearAll","i","useEffect","storageDb","openDbReq","open","onupgradeneeded","tx","target","objectStoreNames","contains","listStore","indexNames","createIndex","unique","createObjectStore","keyPath","autoIncrement","onblocked","openDb","indexedDB","setDB","fetch","App","dbIsEmpty","setDBIsEmpty","setMasterItems","setDateMap","setDate","runFetchEffect","itemStatesAndSetters","hasDB","dbListener","mList","nameToItem","currentList","dateMapTemp","dateItemList","values","addListener","removeListener","to","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d6643a40.chunk.js","sourcesContent":["export const Units = new Set([\n  'Kg',\n  'gm',\n  'Packet(s)',\n  'No',\n]);\n\nexport const Categories = new Set([\n  'Vegetables',\n  'Fruits',\n  'Medicines',\n]);\n","import React from 'react';\nimport { Item } from '../types/item';\nimport { ShoppingDatabase } from '../storage/storageDefs';\n\n// eslint-disable-next-line no-unused-vars\ntype ListenerType = (x: Item[]) => void;\n\nexport class StorageType {\n  private db: ShoppingDatabase | undefined = undefined;\n\n  private listeners = new Set<ListenerType>();\n\n  constructor(db?: ShoppingDatabase) {\n    this.db = db;\n    this.invokeListeners = this.invokeListeners.bind(this);\n  }\n\n  public setDB(db: ShoppingDatabase): void {\n    this.db = db;\n  }\n\n  public hasDB(): boolean {\n    return !!this.db;\n  }\n\n  private invokeListeners(items: Item[]): void {\n    // console.log('Invoking ' + this.masterListeners.size + ' master listeners.');\n    this.listeners.forEach((listener) => {\n      listener(items);\n    });\n  }\n\n  public fetch(): void {\n    if (!this.db) {\n      return;\n    }\n\n    this.db.getAllItems().then(this.invokeListeners);\n  }\n\n  public addListener(listener: ListenerType): void {\n    this.listeners.add(listener);\n  }\n\n  public removeListener(listener: ListenerType): void {\n    this.listeners.delete(listener);\n  }\n\n  public addUpdate(item: Item): void {\n    if (!this.db) {\n      return;\n    }\n\n    this.db.addUpdateItem(item);\n  }\n\n  public delete(item: Item): void {\n    if (!this.db) {\n      return;\n    }\n\n    this.db.deleteItem(item);\n  }\n\n  public clearUnsaved(): Promise<undefined> {\n    if (!this.db) {\n      return new Promise<undefined>(() => undefined);\n    }\n\n    return this.db.clearUnsaved();\n  }\n\n  public saveUnsaved(saveDate: Date): Promise<undefined> {\n    if (!this.db) {\n      return new Promise<undefined>(() => undefined);\n    }\n\n    return this.db.saveUnsaved(saveDate);\n  }\n\n  public async exportToJSONText(): Promise<string> {\n    let obj;\n    try {\n      obj = await this.db?.exportToJSON();\n    } catch (e) {\n      return '';\n    }\n\n    return JSON.stringify(obj);\n  }\n\n  public async importFromJSONText(jsonText: string): Promise<boolean> {\n    let res = false;\n    try {\n      res = !!await this.db?.importFromJSON(jsonText);\n    } catch (e) {\n      return false;\n    }\n\n    return res;\n  }\n}\n\nexport const StorageContext = React.createContext({} as StorageType);\nexport const StorageProvider = StorageContext.Provider;\n","/* eslint-disable */\nimport React from 'react';\nimport { Item, ItemStatesAndSetters } from \"../types/item\";\n\nexport function ItemDisplay(props: {\n    item: Item,\n    newItemStatesAndSetters?: ItemStatesAndSetters,\n    removeItem?: (x: Item) => void,\n    disabled?: boolean,\n    setSearchListVisible?: React.Dispatch<React.SetStateAction<boolean>>,\n}) {\n    const handleItemClick = () => {\n        if (props.disabled)\n            return;\n\n        if (!props.newItemStatesAndSetters)\n            return;\n\n        props.newItemStatesAndSetters.setName(props.item.name);\n        props.newItemStatesAndSetters.setQuantity(props.item.quantity);\n        props.newItemStatesAndSetters.setUnit(props.item.unit);\n        props.newItemStatesAndSetters.setComment(props.item.comment);\n        props.newItemStatesAndSetters.setExisting(true);\n        props.newItemStatesAndSetters.setCategory(props.item.category);\n\n        if (props.setSearchListVisible) {\n            props.setSearchListVisible(false); // Hide search list\n            if (props.newItemStatesAndSetters)\n                props.newItemStatesAndSetters.setExisting(false);\n        }\n    };\n\n    let selected = props.newItemStatesAndSetters ? (props.newItemStatesAndSetters.name === props.item.name) : false;\n    const removeItem = () => {\n        if (props.removeItem)\n            props.removeItem(props.item);\n    };\n    return (\n        <li className={\"list-group-item d-flex justify-content-between align-items-start\" + (selected ? \" active\" : \"\") + (props.disabled ? \" disabled\" : \"\")}>\n            <div className=\"ms-2 me-auto\" style={{width: \"100vw\"}} onClick={handleItemClick}>\n                <div className=\"fw-bold\" style={{display: \"inline\"}}>{props.item.name + (props.item.comment ? ' (' + props.item.comment + ')' : '')}</div>\n                <div>{props.item.quantity}&nbsp;{props.item.unit}&nbsp;\n                    { (props.item.category !== undefined) && <small style={{fontStyle: \"italic\", color: \"red\"}}>{'#' + props.item.category}</small> }</div>\n            </div>\n            {props.removeItem && <button type=\"button\" className={(selected ? \"btn-close btn-close-white\" : \"btn-close\")} aria-label=\"Close\" onClick={removeItem}></button>}\n        </li>\n    );\n}","/* eslint-disable */\nimport React from \"react\";\nimport { useContext, useLayoutEffect, useRef } from \"react\";\nimport { Categories, Units } from \"../consts/itemConsts\";\nimport { StorageContext } from \"../contexts/storage\";\nimport { Item, ItemStatesAndSetters } from '../types/item';\nimport { ItemDisplay } from './ItemDisplay';\n\nimport '../styles/itemcontrols.css';\n\ntype ItemControlProps = {\n    masterList: Set<string>;\n    masterItems: Item[];\n    setMasterList: React.Dispatch<React.SetStateAction<Set<string>>>;\n    newList: Item[];\n    setNewList: React.Dispatch<React.SetStateAction<Item[]>>;\n    newItemStatesAndSetters: ItemStatesAndSetters;\n    searchListVisible: boolean;\n    setSearchListVisible: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\ntype ItemSearchListProps = {\n    masterList: Set<string>;\n    masterItems: Item[];\n    newList: Item[];\n    newItemStatesAndSetters: ItemStatesAndSetters;\n    searchListVisible: boolean;\n    setSearchListVisible: React.Dispatch<React.SetStateAction<boolean>>;\n    searchYPosition: number;\n    setSearchYPosition: React.Dispatch<React.SetStateAction<number>>;\n}\n\nexport function ItemControls(props: ItemControlProps) {\n    const storage = useContext(StorageContext)\n    let {\n        name: newItemName,\n        setName: setNewItemName,\n        quantity,\n        setQuantity,\n        unit,\n        setUnit,\n        comment,\n        setComment,\n        existing,\n        setExisting,\n        date,\n        category,\n        setCategory,\n    } = props.newItemStatesAndSetters;\n\n    let nextList:string[] = [];\n    props.masterList.forEach(masterItem => {\n        if (!props.newList.find(item => item.name === masterItem))\n            nextList.push(masterItem);\n    });\n\n    function handleNewItem(e: React.FormEvent<HTMLInputElement>) {\n        e.preventDefault();\n\n        if (!newItemName || !quantity || !unit)\n            return;\n\n        storage.addUpdate({name: newItemName, quantity, unit, comment, saved: 0, date, category});\n        props.setNewList(currList => {\n            let matchItemIndex = currList.findIndex((item) => item.name === newItemName);\n            if (matchItemIndex === -1) {\n                return [...currList, {name: newItemName, quantity, unit, comment, saved: 0, date, category}];\n            }\n\n            let listCopy = [...currList];\n            let matchItem = listCopy[matchItemIndex];\n            matchItem.quantity = quantity;\n            matchItem.unit = unit;\n            matchItem.comment = comment;\n            matchItem.category = category;\n            return listCopy;\n        });\n\n        props.setMasterList(currentSet => {\n            if (currentSet.has(newItemName))\n                return currentSet;\n            let newSet = new Set<string>(currentSet);\n            newSet.add(newItemName);\n            return newSet;\n        });\n        setNewItemName('');\n        setQuantity(0);\n        setUnit('');\n        setComment('');\n        setExisting(false);\n        setCategory(undefined);\n    }\n\n    function handleItemNameChange(e: React.FormEvent<HTMLInputElement>) {\n        setNewItemName(e.currentTarget.value);\n        let masterItem = props.masterItems.find((item) => item.name === e.currentTarget.value);\n        if (masterItem) {\n            setQuantity(masterItem.quantity);\n            setUnit(masterItem.unit);\n            setUnit(masterItem.unit);\n            setComment(masterItem.comment);\n            setCategory(masterItem.category);\n        }\n        setExisting(props.newList.findIndex((item) => item.name === e.currentTarget.value) !== -1);\n    }\n\n    function handleQtyChange(e: React.FormEvent<HTMLInputElement>) {\n        if (e.currentTarget.value === '') {\n            setQuantity(0);\n            return;\n        }\n        const qty = parseFloat(e.currentTarget.value);\n        setQuantity(Math.round(qty * 10) / 10);\n    }\n\n    function handleUnitChange(e: React.FormEvent<HTMLInputElement>) {\n        setUnit(e.currentTarget.value);\n    }\n\n    function handleCommentsChange(e: React.FormEvent<HTMLInputElement>) {\n        setComment(e.currentTarget.value);\n    }\n\n    function handleClear() {\n        setNewItemName('');\n        setQuantity(0);\n        setUnit('');\n        setComment('');\n        setExisting(false);\n        setCategory(undefined);\n    }\n\n    function handleCategoryChange(e: React.FormEvent<HTMLInputElement>) {\n        setCategory(e.currentTarget.value === '' ? undefined : e.currentTarget.value);\n    }\n\n    function handleContextMenu(e: React.FormEvent<HTMLInputElement>) {\n        e.preventDefault();\n        props.setSearchListVisible(true);\n    }\n\n    return (\n        <form id=\"item-controls\">\n            <div className=\"mb-3\">\n                <label htmlFor=\"item-search\" className=\"form-label\">Item name</label>\n                <input type=\"search\" id=\"item-search\" className=\"form-control bottom-border-only\"\n                    list=\"next-item-list\"\n                    aria-label=\"Search through master list\"\n                    onChange={handleItemNameChange}\n                    onContextMenu={handleContextMenu}\n                    value={newItemName}\n                    required></input>\n            </div>\n\n            <datalist id=\"next-item-list\">\n                {nextList.map(item => <option key={item} value={item}/>)}\n            </datalist>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"qty-input\" className=\"form-label\">Quantity</label>\n                <input type=\"number\" className=\"form-control bottom-border-only\"\n                    id=\"qty-input\"\n                    aria-label=\"Quantity\"\n                    min={1}\n                    required\n                    onChange={handleQtyChange}\n                    value={quantity === 0 ? '' : (quantity + '')}></input>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"unit-input\" className=\"form-label\">Unit</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"unit-input\"\n                    list=\"unit-list\"\n                    aria-label=\"Unit\"\n                    required\n                    onChange={handleUnitChange}\n                    value={unit}></input>\n            </div>\n\n            <datalist id=\"unit-list\">\n                {[...Units].map(unit => <option key={unit} value={unit}/>)}\n            </datalist>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"comments-input\" className=\"form-label\">Comments</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"comments-input\"\n                    aria-label=\"Comments\"\n                    onChange={handleCommentsChange}\n                    value={comment}></input>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"category-input\" className=\"form-label\">Category</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"category-input\"\n                    list=\"category-list\"\n                    aria-label=\"Unit\"\n                    required\n                    onChange={handleCategoryChange}\n                    value={category === undefined ? '' : category}></input>\n            </div>\n\n            <datalist id=\"category-list\">\n                {[...Categories].map(cat => <option key={cat} value={cat}/>)}\n            </datalist>\n\n            <br></br>\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\n                <input type=\"submit\" value={existing ? \"Modify\" : \"Add\"} className=\"btn btn-primary\"\n                    onClick={handleNewItem} style={{flexGrow: 0.40}}></input>\n                <input type=\"button\" value=\"Clear\" className=\"btn btn-danger\"\n                    onClick={handleClear} style={{flexGrow: 0.40}}></input>\n            </div>\n        </form>\n    );\n};\n\nexport function ItemSearchList(props: ItemSearchListProps) {\n\n    const itemListDiv = useRef<HTMLDivElement>(null);\n    useLayoutEffect(() => {\n        if (itemListDiv.current)\n            itemListDiv.current.scrollTop = props.searchYPosition;\n    });\n\n    let itemDisplayList: JSX.Element[] = [];\n    props.masterItems.forEach(masterItem => {\n        itemDisplayList.push(\n            <ItemDisplay\n                key={masterItem.name}\n                item={masterItem}\n                newItemStatesAndSetters={props.newItemStatesAndSetters}\n                disabled={!!props.newList.find(item => item.name === masterItem.name)}\n                setSearchListVisible={props.setSearchListVisible}/>\n        );\n    });\n\n    function handleScroll(e: React.UIEvent) {\n        props.setSearchYPosition(e.currentTarget.scrollTop);\n    }\n\n    return (\n        <div id=\"item-search-list\" ref={itemListDiv}\n            style={{height: \"calc(100vh - 220px)\", overflowY:\"scroll\"}}\n            onScroll={handleScroll}>\n            { itemDisplayList }\n        </div>\n    );\n}\n","/* eslint-disable no-unused-vars */\nexport type BooleanNumber = 0 | 1;\n\nexport type Item = {\n  name: string;\n  quantity: number;\n  unit: string;\n  comment: string;\n  date: Date;\n  saved: BooleanNumber;\n  category: string | undefined;\n};\n\nexport type ItemStatesAndSetters = {\n  name: string;\n  setName: (name: string) => void;\n  quantity: number;\n  setQuantity: (qty: number) => void;\n  unit: string;\n  setUnit: (unit: string) => void;\n  comment: string;\n  setComment: (comment: string) => void;\n  date: Date;\n  setDate: (date: Date) => void;\n  existing: boolean;\n  setExisting: (val: boolean) => void;\n  category: string | undefined;\n  setCategory: (category: string | undefined) => void;\n}\n\nexport function cloneItem(item: Item): Item {\n  return {\n    name: item.name,\n    quantity: item.quantity,\n    unit: item.unit,\n    comment: item.comment,\n    date: item.date,\n    saved: item.saved,\n    category: item.category,\n  };\n}\n\nexport type JSONRepresentationType = {\n  items: Item[];\n  name: string;\n  message: string;\n}\n\nexport type ItemLikeObject = {\n  name?: unknown;\n  quantity?: unknown;\n  unit?: unknown;\n  comment?: unknown;\n  date?: unknown;\n  saved?: unknown;\n  category?: unknown;\n}\n\nexport function getItemFromObject(objSrc: unknown): Item | undefined {\n  if (typeof objSrc !== 'object') {\n    return undefined;\n  }\n\n  const obj = objSrc as ItemLikeObject;\n\n  if (typeof obj.name !== 'string' ||\n    typeof obj.quantity !== 'number' ||\n    typeof obj.unit !== 'string' ||\n    typeof obj.comment !== 'string' ||\n    typeof obj.date !== 'string' ||\n    typeof obj.saved !== 'number' ||\n    (typeof obj.category !== 'string' && typeof obj.category !== 'undefined')) {\n    return undefined;\n  }\n\n  return {\n    name: obj.name,\n    quantity: obj.quantity,\n    unit: obj.unit,\n    comment: obj.comment,\n    date: new Date(obj.date),\n    saved: obj.saved as BooleanNumber,\n    category: obj.category,\n  };\n}\n\nexport interface StorageMin {\n  clear(): void;\n  getItem(key: string): string | null;\n  removeItem(key: string): void;\n  setItem(key: string, value: string): void;\n}\n","/* eslint-disable */\nimport { useContext, useState } from \"react\";\nimport { Item, ItemStatesAndSetters, cloneItem } from '../types/item';\nimport { ItemDisplay } from '../components/ItemDisplay';\nimport { StorageContext } from '../contexts/storage';\nimport { useHistory } from 'react-router-dom';\n\nimport '../styles/newitemlist.css';\n\nconst itemListToText = (list: Item[]): string => {\n    let message = window.localStorage.getItem('settings_message');\n    let itemsText: string[] = !message ? [`${list[0].date.toLocaleDateString()}`, `${list.length} items`, ''] :\n        [message, ''];\n\n    let sublists = new Map<string, Item[]>();\n    const cat2String = (category: string | undefined) => category === undefined ? '' : category;\n    list.forEach(item => {\n        const cat = cat2String(item.category);\n        const sub = sublists.get(cat);\n        if (sub)\n            sub.push(item);\n        else\n            sublists.set(cat, [item]);\n    });\n\n    let categories = [...sublists.keys()];\n    categories.sort();\n\n    categories.forEach((cat: string) => {\n        if (cat === '') {\n            itemsText.push('');\n        } else {\n            itemsText.push('');\n            itemsText.push(cat);\n            itemsText.push('='.repeat(cat.length));\n        }\n\n        const items = sublists.get(cat) as Item[];\n        items.forEach((item, index) => {\n            let commentString = item.comment ? ` (${item.comment})` : '';\n            itemsText.push(`${index + 1}. ${item.name}${commentString} : ${item.quantity} ${item.unit}`);\n        });\n    });\n\n    return itemsText.join('\\n');\n}\n\nexport function ItemList(props: {\n    list: Item[],\n    copyList?: boolean,\n    removeItem?: ((x: Item) => void),\n    newItemStatesAndSetters?: ItemStatesAndSetters,\n    setNewList?: React.Dispatch<React.SetStateAction<Item[]>>,\n    date?: Date\n}) {\n\n    let [copied, setCopied] = useState(false);\n    const storage = useContext(StorageContext);\n    let history = useHistory();\n\n    const handleCopy = () => {\n        navigator.clipboard.writeText(itemListToText(props.list))\n            .then(() => {\n                setCopied(true);\n                setTimeout(() => {\n                    setCopied(false);\n                }, 1000);\n            });\n    };\n\n    const handleNewListFrom = function(e: React.FormEvent<HTMLInputElement>) {\n        e.preventDefault();\n\n        if (!props.setNewList) {\n            return;\n        }\n\n        props.setNewList(currList => {\n            if (!props.list) {\n                return currList;\n            }\n\n            let newDate = props.date || new Date();\n\n            let outMap = new Map<string, Item>();\n            currList.forEach((item) => {\n                outMap.set(item.name, item);\n            });\n\n            props.list.forEach((item) => {\n                item = cloneItem(item);\n                item.saved = 0;\n                item.date = newDate;\n                outMap.set(item.name, item);\n            });\n\n            let outList: Item[] = [];\n            outMap.forEach((item) => {\n                outList.push(item);\n                storage.addUpdate(item);\n            });\n\n            return outList;\n        });\n\n        history.push('/');\n    }\n\n    return (\n        <div style={{height: \"calc(100vh - 220px)\"}}>\n            <ol className=\"list-group list-group-flush list-group-numbered\" style={{height: \"100%\", overflowY:\"auto\"}}>\n                {props.list.map(item =>\n                    <ItemDisplay item={item} key={item.name}\n                        newItemStatesAndSetters={props.newItemStatesAndSetters}\n                        removeItem={props.removeItem}/>)}\n            </ol>\n            <br/>\n            {\n                props.copyList && props.list.length > 0 &&\n                <input type=\"button\" value={copied ? 'Copied!' : 'Copy list'} className={\"btn \" + (copied ? \"btn-success\" : \"btn-primary\")}\n                    onClick={handleCopy}/>\n            }\n            {\n                props.setNewList && props.date && props.list.length > 0 &&\n                <input type=\"button\" value=\"Create new list\" className=\"btn btn-primary\"\n                    onClick={handleNewListFrom}/>\n            }\n        </div>\n    );\n}\n\nexport function NewItemList(props: {\n    list: Item[],\n    removeItem: (x: Item) => void,\n    newItemStatesAndSetters: ItemStatesAndSetters,\n    setRunFetchEffect: (flag: boolean) => void\n}) {\n    const storage = useContext(StorageContext);\n\n    const clearNewItemControls = () => {\n        props.newItemStatesAndSetters.setName('');\n        props.newItemStatesAndSetters.setQuantity(0);\n        props.newItemStatesAndSetters.setUnit('');\n        props.newItemStatesAndSetters.setComment('');\n        props.newItemStatesAndSetters.setExisting(false);\n        props.newItemStatesAndSetters.setCategory(undefined);\n    };\n\n    const handleClear = () => {\n        if (props.list.length === 0)\n            return;\n\n        storage.clearUnsaved()?.then(() => {\n            clearNewItemControls();\n            props.setRunFetchEffect(true);\n        })\n    };\n\n    const handleSave = () => {\n        if (props.list.length === 0)\n            return;\n\n        const saveDate = new Date();\n        storage.saveUnsaved(saveDate)?.then(() => {\n            clearNewItemControls();\n            props.setRunFetchEffect(true);\n        });\n\n        navigator.clipboard.writeText(itemListToText(props.list));\n    };\n\n    return (\n        <div id=\"new-item-list-wrapper\">\n            <p>Shopping list({props.list.length})</p>\n            <ItemList list={props.list} newItemStatesAndSetters={props.newItemStatesAndSetters}\n                removeItem={props.removeItem}/>\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 25}}>\n                <input type=\"button\" value=\"Save and Copy\" className=\"btn btn-primary\"\n                    onClick={handleSave} style={{flexGrow: 0.40}} disabled={props.list.length === 0}></input>\n                <input type=\"button\" value=\"Clear\" className=\"btn btn-danger\"\n                    onClick={handleClear} style={{flexGrow: 0.40}} disabled={props.list.length === 0}></input>\n            </div>\n        </div>\n    );\n}","import React, { useContext, useState } from 'react';\nimport { Item, ItemStatesAndSetters } from '../types/item';\nimport { ItemControls, ItemSearchList } from '../components/ItemControls';\nimport { DebugItemLists } from '../components/DebugItemLists';\nimport { NewItemList } from '../components/ItemList';\nimport { StorageContext } from '../contexts/storage';\n\nimport '../styles/newlist.css';\n\nexport default function NewList(props: {\n  masterList: Set<string>;\n  masterItems: Item[];\n  setMasterList: React.Dispatch<React.SetStateAction<Set<string>>>;\n  newList: Item[];\n  setNewList: React.Dispatch<React.SetStateAction<Item[]>>;\n  newItemStatesAndSetters: ItemStatesAndSetters;\n  setRunFetchEffect: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n  const storage = useContext(StorageContext);\n  const {\n    newItemStatesAndSetters, newList, setNewList,\n    masterList, masterItems, setMasterList,\n    setRunFetchEffect,\n  } = props;\n  const {\n    name,\n    setName,\n    setQuantity,\n    setUnit,\n    setComment,\n    setExisting,\n    setCategory,\n  } = newItemStatesAndSetters;\n\n  const [searchListVisible, setSearchListVisible] = useState<boolean>(false);\n  const [searchYPosition, setSearchYPosition] = useState<number>(0);\n\n  const removeItem = (item: Item) => {\n    const nameToRemove = item.name;\n    const list = newList.filter((oldItem) => oldItem.name !== nameToRemove);\n    storage.delete(item);\n    setNewList(list);\n    if (name === nameToRemove) {\n      setName('');\n      setQuantity(0);\n      setUnit('');\n      setComment('');\n      setExisting(false);\n      setCategory(undefined);\n    }\n  };\n\n  const debugMode = false;\n\n  return (\n    <div id=\"newlist-wrapper\">\n      {(searchListVisible ?\n        (\n          <ItemSearchList\n            masterItems={masterItems}\n            masterList={masterList}\n            newList={newList}\n            newItemStatesAndSetters={newItemStatesAndSetters}\n            searchListVisible={searchListVisible}\n            setSearchListVisible={setSearchListVisible}\n            searchYPosition={searchYPosition}\n            setSearchYPosition={setSearchYPosition}\n          />\n        ) :\n        (\n          <ItemControls\n            masterList={masterList}\n            setMasterList={setMasterList}\n            newList={newList}\n            setNewList={setNewList}\n            masterItems={masterItems}\n            newItemStatesAndSetters={newItemStatesAndSetters}\n            searchListVisible={searchListVisible}\n            setSearchListVisible={setSearchListVisible}\n          />\n        )\n      )}\n\n      <div className=\"sepline\" />\n      <NewItemList\n        list={newList}\n        newItemStatesAndSetters={newItemStatesAndSetters}\n        removeItem={removeItem}\n        setRunFetchEffect={setRunFetchEffect}\n      />\n      {debugMode && <DebugItemLists masterList={masterList} newList={newList} />}\n      <br />\n    </div>\n  );\n}\n","/* eslint-disable */\nimport React from \"react\";\nimport { Item } from '../types/item';\n\nexport function ListDisplay(props: {\n    date: number,\n    items: Item[],\n    selected: boolean;\n    setSelectedDate: React.Dispatch<React.SetStateAction<number>>;\n    readOnly: boolean;\n}) {\n    const handleListClick = () => {\n        props.setSelectedDate(props.date);\n    };\n\n    const removeList = () => {\n        // TODO: remove from items from db and re-fetch.\n    };\n\n    return (\n        <li className={\"list-group-item d-flex justify-content-between align-items-start\" + (props.selected ? \" active\" : \"\")}>\n            <div className=\"ms-2 me-auto\" style={{width: \"100vw\"}} onClick={handleListClick}>\n                <div className=\"fw-bold\" style={{display: \"inline\"}}>{new Date(props.date).toLocaleString()}</div>\n                <div>{props.items.length}&nbsp;items</div>\n            </div>\n            {!props.readOnly && <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={removeList}></button> }\n        </li>\n    );\n}","import React, { useState } from 'react';\nimport { Item } from '../types/item';\nimport { ListDisplay } from '../components/ListDisplay';\nimport { ItemList } from '../components/ItemList';\n\nimport '../styles/previouslists.css';\n\nexport default function PreviousLists(props: {\n  dateMap: Map<number, Item[]>;\n  setNewList: React.Dispatch<React.SetStateAction<Item[]>>;\n  date: Date;\n}) {\n  const [selectedDate, setSelectedDate] = useState<number>(0);\n  const { dateMap, setNewList, date } = props;\n  const dateList = [...dateMap.keys()]\n    .sort((date1, date2) => date2.valueOf() - date1.valueOf());\n  const selectedItems = dateMap.get(selectedDate);\n  return (\n    <div style={{ marginLeft: 10, width: '90%' }}>\n      <p>\n        Previous shopping lists(\n        {dateMap.size}\n        )\n      </p>\n      <div id=\"previous-lists-wrapper\">\n        <div>\n          <ol id=\"previous-lists\" className=\"list-group list-group-flush list-group-numbered\">\n            {dateList.map((thisDate) => (\n              <ListDisplay\n                date={thisDate}\n                items={dateMap.get(thisDate) || []}\n                key={thisDate}\n                selected={thisDate === selectedDate}\n                setSelectedDate={setSelectedDate}\n                readOnly\n              />\n            ))}\n          </ol>\n        </div>\n        {dateList.length !== 0 && <div className=\"sepline\" />}\n        <div id=\"previous-list-one\">\n          {\n            (selectedDate !== 0 && selectedItems !== undefined) && (\n            <ItemList\n              list={selectedItems}\n              copyList\n              setNewList={setNewList}\n              date={date}\n            />\n            )\n          }\n        </div>\n      </div>\n      <br />\n    </div>\n  );\n}\n","import React, { useContext, useState } from 'react';\nimport { StorageContext } from '../contexts/storage';\n\nimport '../styles/datapage.css';\n\nfunction DataPage(props: {\n  setRunFetchEffect: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n  const [name, setName] = useState(window.localStorage.getItem('settings_name'));\n  const [message, setMessage] = useState(window.localStorage.getItem('settings_message'));\n  const [importStatus, setImportStatus] = useState(0);\n\n  const storage = useContext(StorageContext);\n\n  const { setRunFetchEffect } = props;\n\n  function handleNameChange(e: React.FormEvent<HTMLInputElement>) {\n    setName(e.currentTarget.value);\n  }\n\n  function handleMessageChange(e: React.FormEvent<HTMLTextAreaElement>) {\n    setMessage(e.currentTarget.value);\n  }\n\n  function handleSave() {\n    if (name) {\n      window.localStorage.setItem('settings_name', name);\n    }\n\n    if (message) {\n      window.localStorage.setItem('settings_message', message);\n    }\n  }\n\n  function handleClear() {\n    window.localStorage.removeItem('settings_name');\n    window.localStorage.removeItem('settings_message');\n    setName('');\n    setMessage('');\n  }\n\n  function handleExport() {\n    storage.exportToJSONText().then((text) => {\n      const a = document.createElement('a');\n      const file = new Blob([text], { type: 'text/plain' });\n      a.href = URL.createObjectURL(file);\n      a.download = `shopping-list-export-${(new Date()).toLocaleDateString()}.json`;\n      a.click();\n    });\n  }\n\n  function handleImport() {\n    const inp = document.getElementById('importFile');\n    inp?.click();\n  }\n\n  function onLocalStorageChanged() {\n    setName(window.localStorage.getItem('settings_name'));\n    setMessage(window.localStorage.getItem('settings_message'));\n  }\n\n  function handleImportFile() {\n    const inp = document.getElementById('importFile') as HTMLInputElement;\n    if (!inp || !inp.files || !inp.files.length) return;\n    inp.files[0].text().then((jsonText) => storage\n      .importFromJSONText(jsonText)).then((res: boolean) => {\n      if (res) {\n        onLocalStorageChanged();\n        setRunFetchEffect(true);\n      }\n      setImportStatus(res ? 1 : -1);\n      setTimeout(() => {\n        setImportStatus(0);\n      }, 1000);\n      return true;\n    });\n  }\n\n  let importButtonText = 'Import from file';\n  if (importStatus === -1) {\n    importButtonText = 'Import failed';\n  } else if (importStatus !== 0) {\n    importButtonText = 'Import successful!';\n  }\n\n  const settingsNameId = 'settings-name';\n\n  return (\n    <div id=\"data-page\">\n      <div id=\"import-export\">\n        <input\n          type=\"button\"\n          value=\"Export Data\"\n          className=\"data-button data-export-button\"\n          onClick={handleExport}\n          style={{ marginBottom: 20 }}\n        />\n        <input\n          type=\"button\"\n          value={importButtonText}\n          className=\"data-button data-import-button\"\n          onClick={handleImport}\n        />\n        <input\n          type=\"file\"\n          id=\"importFile\"\n          onChange={handleImportFile}\n          style={{ display: 'none' }}\n          accept=\".json\"\n        />\n      </div>\n      <br />\n      <div className=\"sepline-horiz\" />\n      <form id=\"settings-form\">\n        <h5>Delivery Information</h5>\n        <br />\n        <div className=\"mb-3\">\n          <label\n            htmlFor={settingsNameId}\n            className=\"form-label\"\n          >\n            Name\n            <input\n              type=\"text\"\n              id={settingsNameId}\n              className=\"form-control\"\n              aria-label=\"Your name\"\n              placeholder=\"Your name\"\n              onChange={handleNameChange}\n              // eslint-disable-next-line no-unneeded-ternary\n              value={name ? name : ''}\n            />\n          </label>\n        </div>\n        <div className=\"mb-3\">\n          <label\n            htmlFor=\"settings-message\"\n            className=\"form-label\"\n          >\n            Custom message for delivery\n            <textarea\n              id=\"settings-message\"\n              className=\"form-control\"\n              rows={6}\n              aria-label=\"Your message\"\n              placeholder=\"Your message\"\n              onChange={handleMessageChange}\n              // eslint-disable-next-line no-unneeded-ternary\n              value={message ? message : ''}\n            />\n          </label>\n        </div>\n        <br />\n        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n          <input\n            type=\"submit\"\n            value=\"Save\"\n            className=\"btn btn-success\"\n            onClick={handleSave}\n            style={{ flexGrow: 0.40 }}\n          />\n          <input\n            type=\"button\"\n            value=\"Clear\"\n            className=\"btn btn-danger\"\n            onClick={handleClear}\n            style={{ flexGrow: 0.40 }}\n          />\n        </div>\n        <br />\n      </form>\n    </div>\n  );\n}\n\nexport default DataPage;\n","import {\n  Item, cloneItem, BooleanNumber, JSONRepresentationType, getItemFromObject, StorageMin,\n} from '../types/item';\n\nconst DB_NAME = 'shopping-list-app-db';\nconst DB_VERSION = 3;\nconst DB_SHOPPING_LIST_STORE_NAME = 'shopping-list-store';\n\ntype ItemWithID = Item & { id: number };\ntype JSONExportType = {\n  items: Item[],\n  name: string,\n  message: string,\n};\n\nexport class ShoppingDatabase {\n  private db: IDBDatabase;\n\n  constructor(db: IDBDatabase) {\n    this.db = db;\n  }\n\n  getAllItems(maxCount = -1): Promise<Item[]> {\n    return new Promise<Item[]>((resolve, reject) => {\n      const objectStore = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME)\n        .objectStore(DB_SHOPPING_LIST_STORE_NAME);\n      const getReq = objectStore.getAll(null, maxCount > 0 ? maxCount : undefined);\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      getReq.onerror = (event: Event) => {\n        console.debug('getAllItems getAll() failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} getAll: errCode = ${getReq.error}`));\n      };\n\n      // eslint-disable-next-line no-unused-vars\n      getReq.onsuccess = function onsuccess(this: IDBRequest<unknown[]>) {\n        console.debug('getAllItems: getAll() succeeded.');\n        resolve(this.result as Item[]);\n      };\n    });\n  }\n\n  getItemsWithDate(date: Date, keyRangeOnly = IDBKeyRange.only,\n    transaction?: IDBTransaction): Promise<Item[]> {\n    return new Promise<Item[]>((resolve, reject) => {\n      const objectStore = (transaction || this.db.transaction(DB_SHOPPING_LIST_STORE_NAME))\n        .objectStore(DB_SHOPPING_LIST_STORE_NAME);\n      const getReq = objectStore.index('date').getAll(keyRangeOnly(date));\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      getReq.onerror = (event: Event) => {\n        console.debug('getItemsWithDate .index(\"date\").getAll() failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} index(\"date\").getAll: errCode = ${getReq.error}`));\n      };\n\n      // eslint-disable-next-line no-unused-vars\n      getReq.onsuccess = function onsuccess(this: IDBRequest<unknown[]>) {\n        console.debug('getItemsWithDate .index(\"date\").getAll() succeeded');\n        resolve(this.result as Item[]);\n      };\n    });\n  }\n\n  getItemsSaved(saved: BooleanNumber, keyRangeOnly = IDBKeyRange.only,\n    transaction?: IDBTransaction): Promise<Item[]> {\n    return new Promise<Item[]>((resolve, reject) => {\n      const objectStore = (transaction || this.db.transaction(DB_SHOPPING_LIST_STORE_NAME))\n        .objectStore(DB_SHOPPING_LIST_STORE_NAME);\n      const getReq = objectStore.index('saved').getAll(keyRangeOnly(saved));\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      getReq.onerror = (event: Event) => {\n        console.debug('getItemsSaved .index(\"date\").getAll() failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} index(\"date\").getAll: errCode${getReq.error}`));\n      };\n\n      // eslint-disable-next-line no-unused-vars\n      getReq.onsuccess = function onsuccess(this: IDBRequest<unknown[]>) {\n        console.debug('getItemsSaved .index(\"date\").getAll() succeeded');\n        resolve(this.result as Item[]);\n      };\n    });\n  }\n\n  deleteItem(item: Item, keyRangeOnly = IDBKeyRange.only): Promise<undefined> {\n    const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, 'readwrite');\n    const objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n    return this.getItemsWithDate(item.date, keyRangeOnly, transaction)\n      .then((items) => new Promise<undefined>((resolve, reject) => {\n        console.debug('deleteItem: getItemsWithDate succeeded');\n        let found = false;\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        const onerror = (event: Event) => {\n          console.debug('deleteItem add/update failed');\n          reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} add/update failed`));\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        const onsuccess = function onsuccess(this: IDBRequest<undefined>) {\n          console.debug('deleteItem: add/update succeeded.');\n          resolve(undefined);\n        };\n\n        (items as ItemWithID[]).forEach((matchItem: ItemWithID) => {\n          if (!found && matchItem.name === item.name && matchItem.saved === item.saved) {\n            console.debug('deleteItem: found a matching item, deleting it...');\n            const setReq = objectStore.delete(keyRangeOnly(matchItem.id));\n            setReq.onerror = onerror;\n            setReq.onsuccess = onsuccess;\n            found = true;\n          }\n        });\n\n        if (!found) {\n          console.debug('warning: deleteItem no matching entry.');\n          resolve(undefined);\n        }\n      })).catch((reason) => {\n        console.debug('deleteItem: getItemsWithDate() failed');\n        return Promise.reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} getItemsWithDate: reason ${reason}`));\n      });\n  }\n\n  clearAll(): Promise<undefined> {\n    return new Promise<undefined>((resolve, reject) => {\n      const request = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, 'readwrite')\n        .objectStore(DB_SHOPPING_LIST_STORE_NAME).clear();\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      request.onerror = (event: Event) => {\n        console.debug('clearAll: clear() failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} clear: errCode${request.error}`));\n      };\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      request.onsuccess = function onsuccess(this: IDBRequest<undefined>) {\n        console.debug('clearAll: clear() succeeded');\n        resolve(this.result);\n      };\n    });\n  }\n\n  clearUnsaved(keyRangeOnly = IDBKeyRange.only): Promise<undefined> {\n    const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, 'readwrite');\n    const objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n    return new Promise<undefined>((resolve, reject) => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      transaction.onerror = (event: Event) => {\n        console.debug('clearUnsaved: clear() failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} clear: errCode${transaction.error}`));\n      };\n\n      transaction.oncomplete = () => {\n        console.debug('clearUnsaved: clear() succeeded');\n        resolve(undefined);\n      };\n\n      this.getItemsSaved(0, keyRangeOnly, transaction).then((items: unknown) => {\n        (items as ItemWithID[]).forEach((clearItem: ItemWithID) => {\n          objectStore.delete(keyRangeOnly(clearItem.id));\n        });\n      }); // catch is not necessary, it will reject in transaction.onerror().\n    });\n  }\n\n  // eslint-disable-next-line no-undef\n  addUpdateItem(item: Item, keyRangeOnly = IDBKeyRange.only): Promise<IDBValidKey> {\n    const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, 'readwrite');\n    const objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n    return this.getItemsWithDate(item.date, keyRangeOnly, transaction)\n      // eslint-disable-next-line no-undef\n      .then((items: unknown) => new Promise<IDBValidKey>((resolve, reject) => {\n        console.debug('addUpdateItem: getItemsWithDate succeeded');\n        let found = false;\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        const onerror = (event: Event) => {\n          console.debug('addUpdateItem add/update failed');\n          reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} add/update failed`));\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars, no-undef\n        const onsuccess = function onsuccess(this: IDBRequest<IDBValidKey>) {\n          console.debug('addUpdateItem: add/update succeeded.');\n          resolve(this.result);\n        };\n\n        (items as ItemWithID[]).forEach((prevItem: ItemWithID) => {\n          if (!found && prevItem.name === item.name) {\n            console.debug('addUpdateItem: found a matching item, updating it...');\n            const itemClone = { ...item, id: 0 };\n            itemClone.id = prevItem.id;\n            const setReq = objectStore.put(itemClone);\n            setReq.onerror = onerror;\n            setReq.onsuccess = onsuccess;\n            found = true;\n          }\n        });\n\n        if (!found) {\n          console.debug('addUpdateItem no matching entry yet');\n          const setReq = objectStore.add(item);\n          setReq.onerror = onerror;\n          setReq.onsuccess = onsuccess;\n        }\n      })).catch((reason) => {\n        console.debug('addUpdateItem: getItemsWithDate() failed');\n        return Promise.reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} getItemsWithDate: reason ${reason}`));\n      });\n  }\n\n  saveUnsaved(date: Date, keyRangeOnly = IDBKeyRange.only): Promise<undefined> {\n    const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, 'readwrite');\n    const objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n    return new Promise<undefined>((resolve, reject) => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      transaction.onerror = (event: Event) => {\n        console.debug('saveUnsaved: transaction failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} transaction: errCode${transaction.error}`));\n      };\n\n      transaction.oncomplete = () => {\n        console.debug('saveUnsaved: transaction succeeded');\n        resolve(undefined);\n      };\n\n      this.getItemsSaved(0, keyRangeOnly, transaction).then((items: unknown) => {\n        (items as Item[]).forEach((unSavedItem: Item) => {\n          const newItem = cloneItem(unSavedItem);\n          newItem.date = date;\n          newItem.saved = 1;\n          objectStore.put(newItem);\n        });\n        (items as ItemWithID[]).forEach((unSavedItem: ItemWithID) => {\n          objectStore.delete(keyRangeOnly(unSavedItem.id));\n        });\n      }); // catch is not necessary, it will reject in transaction.onerror().\n    });\n  }\n\n  public async exportToJSON(localStorage: StorageMin = window.localStorage):\n    Promise<JSONExportType> {\n    try {\n      const items = await this.getAllItems();\n      return {\n        items,\n        name: localStorage.getItem('settings_name') || '',\n        message: localStorage.getItem('settings_message') || '',\n      };\n    } catch (e) {\n      return {\n        items: [],\n        name: '',\n        message: '',\n      };\n    }\n  }\n\n  public async importFromJSON(jsonString: string,\n    keyRangeOnly = IDBKeyRange.only,\n    localStorage: StorageMin = window.localStorage):\n    Promise<boolean> {\n    let obj;\n\n    try {\n      obj = JSON.parse(jsonString);\n    } catch (e) {\n      // console.log('JSON parse error: ' + e);\n      return false;\n    }\n\n    if (typeof obj !== 'object') {\n      return false;\n    }\n\n    if (!Array.isArray(obj.items)) {\n      return false;\n    }\n\n    const items: Item[] = [];\n    (obj.items as unknown[]).forEach((itemObj) => {\n      const item = getItemFromObject(itemObj);\n      if (item) {\n        items.push(item);\n      }\n    });\n\n    const repr: JSONRepresentationType = {\n      items,\n      name: typeof obj.name === 'string' ? obj.name : '',\n      message: typeof obj.message === 'string' ? obj.message : '',\n    };\n\n    let retVal = false;\n\n    if (items.length) {\n      await this.clearAll();\n      for (let i = 0; i < items.length; ++i) {\n        try {\n          // eslint-disable-next-line no-await-in-loop\n          await this.addUpdateItem(items[i], keyRangeOnly);\n        } catch (e) {\n          console.debug(`Error adding item : ${items[i]} err = ${e}`);\n          return false;\n        }\n      }\n      retVal = true;\n    }\n\n    if (repr.name !== '') {\n      localStorage.setItem('settings_name', repr.name);\n      retVal = true;\n    }\n    if (repr.message !== '') {\n      localStorage.setItem('settings_message', repr.message);\n      retVal = true;\n    }\n\n    return retVal;\n  }\n}\n\nexport const openDb = (storageDb: IDBFactory, beSilent = false):\n  Promise<ShoppingDatabase> => {\n  if (beSilent) {\n    console.debug = () => undefined;\n  }\n\n  return new Promise<ShoppingDatabase>((resolve, reject) => {\n    console.debug(`Opening DB: ${DB_NAME}`);\n    const openDbReq = storageDb.open(DB_NAME, DB_VERSION);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n    openDbReq.onsuccess = function onsuccess(this: IDBRequest<IDBDatabase>) {\n      console.debug(`Opened DB: ${DB_NAME}`);\n      resolve(new ShoppingDatabase(this.result));\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n    openDbReq.onerror = (event: Event) => {\n      reject(new Error(`openDb failed errCode: ${openDbReq.error}`));\n    };\n\n    type DatabaseWrapper = { result: IDBDatabase };\n    type TransactionWrapper = { transaction: IDBTransaction };\n\n    openDbReq.onupgradeneeded = (event: Event) => {\n      console.debug(`openDb.onupgradeneeded : ${DB_NAME}`);\n      if (!event || !event.currentTarget ||\n        !(event.currentTarget as unknown as DatabaseWrapper).result) {\n        console.debug(`openDb.onupgradeneeded : ${DB_NAME} no new db in event!`);\n        reject(new Error('onupgradeneeded: no new db!'));\n        return;\n      }\n      const db: IDBDatabase = (event.currentTarget as unknown as DatabaseWrapper).result;\n      const tx: IDBTransaction = (event.target as unknown as TransactionWrapper).transaction;\n\n      if (!db.objectStoreNames.contains(DB_SHOPPING_LIST_STORE_NAME)) {\n        const listStore = db.createObjectStore(DB_SHOPPING_LIST_STORE_NAME,\n          { keyPath: 'id', autoIncrement: true });\n        listStore.createIndex('date', 'date', { unique: false });\n        listStore.createIndex('saved', 'saved', { unique: false });\n      } else {\n        const listStore = tx.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n        if (!listStore.indexNames.contains('saved')) {\n          listStore.createIndex('saved', 'saved', { unique: false });\n        }\n      }\n    };\n\n    openDbReq.onblocked = () => {\n      console.debug(`openDb.onupgradeneeded : ${DB_NAME} blocked on other tabs`);\n      reject(new Error('openDb upgrade: close other tabs and try again.'));\n    };\n  });\n};\n","import {\n  HashRouter,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\n\nimport './styles/navbar.css';\nimport './styles/buttons.css';\nimport './styles/list.css';\nimport React from 'react';\nimport { Item, ItemStatesAndSetters } from './types/item';\n\nimport NewList from './pages/NewList';\nimport PreviousLists from './pages/PreviousLists';\nimport DataPage from './pages/DataPage';\nimport { openDb } from './storage/storageDefs';\nimport { StorageType, StorageProvider } from './contexts/storage';\n\nconst { useEffect, useState } = React;\nconst storage = new StorageType();\n\n// eslint-disable-next-line func-names\n(function () {\n  openDb(indexedDB).then((db) => {\n    storage.setDB(db);\n    storage.fetch();\n  });\n}());\n\nfunction App() {\n  const [masterList, setMasterList] = useState(new Set<string>([]));\n  const [dbIsEmpty, setDBIsEmpty] = useState(false);\n  const [masterItems, setMasterItems] = useState([] as Item[]);\n  const [newList, setNewList] = useState<Item[]>([]);\n  const [dateMap, setDateMap] = useState<Map<number, Item[]>>(new Map<number, Item[]>());\n  const [name, setName] = useState('');\n  const [quantity, setQuantity] = useState(0);\n  const [unit, setUnit] = useState('');\n  const [comment, setComment] = useState('');\n  const [date, setDate] = useState(new Date());\n  const [category, setCategory] = useState(undefined as (string | undefined));\n  const [existing, setExisting] = useState(false);\n  const [runFetchEffect, setRunFetchEffect] = useState(false);\n  const itemStatesAndSetters: ItemStatesAndSetters = {\n    name,\n    setName,\n    quantity,\n    setQuantity,\n    unit,\n    setUnit,\n    comment,\n    setComment,\n    existing,\n    setExisting,\n    date,\n    setDate,\n    category,\n    setCategory,\n  };\n\n  // fetch initial state from DB.\n  useEffect(() => {\n    if (!runFetchEffect && (masterList.size || dbIsEmpty)) {\n      return;\n    }\n\n    if (storage.hasDB()) {\n      // console.log('Fetching...');\n      storage.fetch();\n    }\n\n    const dbListener = (mList: Item[]) => {\n      if (runFetchEffect) setRunFetchEffect(false);\n      setDBIsEmpty((mList.length === 0));\n      setMasterList(new Set<string>(mList.map((item) => item.name)));\n      const nameToItem = new Map<string, Item>();\n      const currentList: Item[] = [];\n      const dateMapTemp = new Map<number, Item[]>();\n      mList.forEach((item) => {\n        if (!item.saved) {\n          currentList.push(item);\n        }\n\n        const prevItem = nameToItem.get(item.name);\n        if (!prevItem) {\n          nameToItem.set(item.name, item);\n        } else if (prevItem.date < item.date) {\n          nameToItem.set(item.name, item);\n        }\n\n        if (item.saved) {\n          const dateItemList = dateMapTemp.get(item.date.valueOf());\n          if (!dateItemList) {\n            dateMapTemp.set(item.date.valueOf(), [item]);\n          } else {\n            dateItemList.push(item);\n          }\n        }\n      });\n      setMasterItems([...nameToItem.values()]);\n      setNewList(currentList);\n      if (currentList.length) {\n        setDate(currentList[0].date);\n      }\n      setDateMap(dateMapTemp);\n    };\n    storage.addListener(dbListener);\n\n    // eslint-disable-next-line consistent-return\n    return function cleanup() {\n      storage.removeListener(dbListener);\n    };\n  });\n\n  return (\n    <HashRouter>\n      <div>\n        <nav>\n          <ul className=\"nav\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">New list</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/previous\" className=\"nav-link\">Previous lists</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/data\" className=\"nav-link\">Data</Link>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"nav-space\" />\n        <br />\n\n        <StorageProvider value={storage}>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/data\">\n              <DataPage setRunFetchEffect={setRunFetchEffect} />\n            </Route>\n            <Route path=\"/previous\">\n              <PreviousLists dateMap={dateMap} setNewList={setNewList} date={date} />\n            </Route>\n            <Route path=\"/\">\n              <NewList\n                masterList={masterList}\n                setMasterList={setMasterList}\n                newList={newList}\n                setNewList={setNewList}\n                masterItems={masterItems}\n                newItemStatesAndSetters={itemStatesAndSetters}\n                setRunFetchEffect={setRunFetchEffect}\n              />\n            </Route>\n          </Switch>\n        </StorageProvider>\n\n        <footer><small>&copy; Dennis Francis 2023</small></footer>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}