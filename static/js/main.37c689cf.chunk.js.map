{"version":3,"sources":["consts/itemConsts.ts","contexts/storage.ts","components/ItemControls.tsx","components/ItemDisplay.tsx","components/ItemList.tsx","pages/NewList.tsx","components/ListDisplay.tsx","pages/PreviousLists.tsx","pages/UserData.tsx","types/item.ts","storage/storageDefs.ts","App.tsx","index.tsx"],"names":["Units","Set","StorageType","db","undefined","listeners","this","invokeListeners","bind","items","forEach","listener","getAllItems","then","add","delete","item","addUpdateItem","deleteItem","clearUnsaved","saveDate","saveUnsaved","StorageContext","React","createContext","StorageProvider","Provider","ItemControls","props","storage","useContext","newItemStatesAndSetters","newItemName","name","setNewItemName","setName","quantity","setQuantity","unit","setUnit","comment","setComment","existing","setExisting","date","nextList","masterList","masterItem","newList","find","push","id","className","htmlFor","type","list","aria-label","onChange","e","currentTarget","value","masterItems","findIndex","required","map","min","parseInt","style","display","flexDirection","justifyContent","onClick","preventDefault","addUpdate","saved","setNewList","currList","matchItemIndex","listCopy","matchItem","setMasterList","currentSet","has","newSet","flexGrow","ItemDisplay","selected","width","removeItem","itemListToText","itemsText","toLocaleDateString","length","index","commentString","join","ItemList","useState","copied","setCopied","maxHeight","overflowY","copyList","navigator","clipboard","writeText","setTimeout","NewItemList","clearNewItemControls","marginTop","Date","setRunFetchEffect","disabled","NewList","nameToRemove","filter","oldItem","ListDisplay","setSelectedDate","toLocaleString","readOnly","PreviousLists","selectedDate","dateList","dateMap","keys","sort","date1","date2","valueOf","selectedItems","get","marginLeft","size","UserData","cloneItem","DB_NAME","DB_SHOPPING_LIST_STORE_NAME","ShoppingDatabase","maxCount","Promise","resolve","reject","getReq","transaction","objectStore","getAll","onerror","event","console","debug","target","errorCode","onsuccess","result","keyRangeOnly","IDBKeyRange","only","getItemsWithDate","found","setReq","catch","reason","request","clear","oncomplete","getItemsSaved","clearItem","prevItem","itemClone","put","unSavedItem","newItem","storageDb","openDbReq","open","onupgradeneeded","tx","objectStoreNames","contains","listStore","indexNames","createIndex","unique","createObjectStore","keyPath","autoIncrement","onblocked","openDb","indexedDB","setDB","fetch","App","dbIsEmpty","setDBIsEmpty","setMasterItems","Map","setDateMap","setDate","runFetchEffect","itemStatesAndSetters","useEffect","hasDB","dbListener","mList","nameToItem","currentList","dateMapTemp","set","dateItemList","values","addListener","removeListener","to","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37c689cf.chunk.js","sourcesContent":["export const Units = new Set([\n    'Kg',\n    'gm',\n    'Packet(s)',\n    'No'\n]);","import React from 'react'\nimport { Item } from '../types/item';\nimport { ShoppingDatabase } from '../storage/storageDefs';\n\nexport class StorageType {\n    private db: ShoppingDatabase | undefined = undefined;\n    private listeners = new Set<((x: Item[]) => void)>();\n    constructor(db?: ShoppingDatabase) {\n        this.db = db;\n        this.invokeListeners = this.invokeListeners.bind(this);\n    }\n\n    public setDB(db: ShoppingDatabase) {\n        this.db = db;\n    }\n\n    public hasDB(): boolean {\n        return !!this.db;\n    }\n\n    private invokeListeners(items: Item[]) {\n        // console.log('Invoking ' + this.masterListeners.size + ' master listeners.');\n        this.listeners.forEach((listener) => {\n            listener(items);\n        });\n    }\n\n    public fetch() {\n        if (!this.db)\n            return;\n\n        this.db.getAllItems().then(this.invokeListeners);\n    }\n\n    public addListener(listener: (x: Item[]) => void) {\n        this.listeners.add(listener);\n    }\n\n    public removeListener(listener: (x: Item[]) => void) {\n        this.listeners.delete(listener);\n    }\n\n    public addUpdate(item: Item) {\n        if (!this.db)\n            return;\n\n        this.db.addUpdateItem(item);\n    }\n\n    public delete(item: Item) {\n        if (!this.db)\n            return;\n\n        this.db.deleteItem(item);\n    }\n\n    public clearUnsaved() {\n        if (!this.db)\n            return;\n\n        return this.db.clearUnsaved();\n    }\n\n    public saveUnsaved(saveDate: Date) {\n        if (!this.db)\n            return;\n\n        return this.db.saveUnsaved(saveDate);\n    }\n};\n\nexport const StorageContext = React.createContext({} as StorageType);\nexport const StorageProvider = StorageContext.Provider;","import React from \"react\";\nimport { useContext } from \"react\";\nimport { Units } from \"../consts/itemConsts\";\nimport { StorageContext } from \"../contexts/storage\";\nimport { Item, ItemStatesAndSetters } from '../types/item';\n\nimport '../styles/itemcontrols.css';\n\ntype ItemControlProps = {\n    masterList: Set<string>;\n    masterItems: Item[];\n    setMasterList: React.Dispatch<React.SetStateAction<Set<string>>>;\n    newList: Item[];\n    setNewList: React.Dispatch<React.SetStateAction<Item[]>>;\n    newItemStatesAndSetters: ItemStatesAndSetters;\n};\n\nexport function ItemControls(props: ItemControlProps) {\n    const storage = useContext(StorageContext)\n    let {\n        name: newItemName,\n        setName: setNewItemName,\n        quantity,\n        setQuantity,\n        unit,\n        setUnit,\n        comment,\n        setComment,\n        existing,\n        setExisting,\n        date\n    } = props.newItemStatesAndSetters;\n\n    let nextList:string[] = [];\n    props.masterList.forEach(masterItem => {\n        if (!props.newList.find(item => item.name === masterItem))\n            nextList.push(masterItem);\n    });\n\n    function handleNewItem(e: React.FormEvent<HTMLInputElement>) {\n        e.preventDefault();\n\n        if (!newItemName || !quantity || !unit)\n            return;\n\n        storage.addUpdate({name: newItemName, quantity, unit, comment, saved: 0, date});\n        props.setNewList(currList => {\n            let matchItemIndex = currList.findIndex((item) => item.name === newItemName);\n            if (matchItemIndex === -1) {\n                return [...currList, {name: newItemName, quantity, unit, comment, saved: 0, date}];\n            }\n\n            let listCopy = [...currList];\n            let matchItem = listCopy[matchItemIndex];\n            matchItem.quantity = quantity;\n            matchItem.unit = unit;\n            matchItem.comment = comment;\n            return listCopy;\n        });\n\n        props.setMasterList(currentSet => {\n            if (currentSet.has(newItemName))\n                return currentSet;\n            let newSet = new Set<string>(currentSet);\n            newSet.add(newItemName);\n            return newSet;\n        });\n        setNewItemName('');\n        setQuantity(0);\n        setUnit('');\n        setComment('');\n        setExisting(false);\n    }\n\n    function handleItemNameChange(e: React.FormEvent<HTMLInputElement>) {\n        setNewItemName(e.currentTarget.value);\n        let masterItem = props.masterItems.find((item) => item.name === e.currentTarget.value);\n        if (masterItem) {\n            setQuantity(masterItem.quantity);\n            setUnit(masterItem.unit);\n            setUnit(masterItem.unit);\n            setComment(masterItem.comment);\n        }\n        setExisting(props.newList.findIndex((item) => item.name === e.currentTarget.value) !== -1);\n    }\n\n    function handleQtyChange(e: React.FormEvent<HTMLInputElement>) {\n        if (e.currentTarget.value === '') {\n            setQuantity(0);\n            return;\n        }\n        setQuantity(parseInt(e.currentTarget.value));\n    }\n\n    function handleUnitChange(e: React.FormEvent<HTMLInputElement>) {\n        setUnit(e.currentTarget.value);\n    }\n\n    function handleCommentsChange(e: React.FormEvent<HTMLInputElement>) {\n        setComment(e.currentTarget.value);\n    }\n\n    function handleClear() {\n        setNewItemName('');\n        setQuantity(0);\n        setUnit('');\n        setComment('');\n        setExisting(false);\n    }\n\n    return (\n        <form id=\"item-controls\">\n            <div className=\"mb-3\">\n                <label htmlFor=\"item-search\" className=\"form-label\">Item name</label>\n                <input type=\"search\" id=\"item-search\" className=\"form-control bottom-border-only\"\n                    list=\"next-item-list\"\n                    aria-label=\"Search through master list\"\n                    onChange={handleItemNameChange}\n                    value={newItemName}\n                    required></input>\n            </div>\n\n            <datalist id=\"next-item-list\">\n                {nextList.map(item => <option key={item} value={item}/>)}\n            </datalist>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"qty-input\" className=\"form-label\">Quantity</label>\n                <input type=\"number\" className=\"form-control bottom-border-only\"\n                    id=\"qty-input\"\n                    aria-label=\"Quantity\"\n                    min={1}\n                    required\n                    onChange={handleQtyChange}\n                    value={quantity === 0 ? '' : (quantity + '')}></input>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"unit-input\" className=\"form-label\">Unit</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"unit-input\"\n                    list=\"unit-list\"\n                    aria-label=\"Unit\"\n                    required\n                    onChange={handleUnitChange}\n                    value={unit}></input>\n            </div>\n\n            <datalist id=\"unit-list\">\n                {[...Units].map(unit => <option key={unit} value={unit}/>)}\n            </datalist>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"comments-input\" className=\"form-label\">Comments</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"comments-input\"\n                    aria-label=\"Comments\"\n                    onChange={handleCommentsChange}\n                    value={comment}></input>\n            </div>\n            <br></br>\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\n                <input type=\"submit\" value={existing ? \"Modify\" : \"Add\"} className=\"btn btn-primary\"\n                    onClick={handleNewItem} style={{flexGrow: 0.40}}></input>\n                <input type=\"button\" value=\"Clear\" className=\"btn btn-danger\"\n                    onClick={handleClear} style={{flexGrow: 0.40}}></input>\n            </div>\n        </form>\n    );\n};\n","import React from 'react';\nimport { Item, ItemStatesAndSetters } from \"../types/item\";\n\nexport function ItemDisplay(props: {\n    item: Item,\n    newItemStatesAndSetters?: ItemStatesAndSetters,\n    removeItem?: (x: Item) => void\n}) {\n    const handleItemClick = () => {\n        if (!props.newItemStatesAndSetters)\n            return;\n\n        props.newItemStatesAndSetters.setName(props.item.name);\n        props.newItemStatesAndSetters.setQuantity(props.item.quantity);\n        props.newItemStatesAndSetters.setUnit(props.item.unit);\n        props.newItemStatesAndSetters.setComment(props.item.comment);\n        props.newItemStatesAndSetters.setExisting(true);\n    };\n\n    let selected = props.newItemStatesAndSetters ? (props.newItemStatesAndSetters.name === props.item.name) : false;\n    const removeItem = () => {\n        if (props.removeItem)\n            props.removeItem(props.item);\n    };\n    return (\n        <li className={\"list-group-item d-flex justify-content-between align-items-start\" + (selected ? \" active\" : \"\")}>\n            <div className=\"ms-2 me-auto\" style={{width: \"100vw\"}} onClick={handleItemClick}>\n                <div className=\"fw-bold\" style={{display: \"inline\"}}>{props.item.name + (props.item.comment ? ' (' + props.item.comment + ')' : '')}</div>\n                <div>{props.item.quantity}&nbsp;{props.item.unit}</div>\n            </div>\n            {props.removeItem && <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={removeItem}></button>}\n        </li>\n    );\n}","import { useContext, useState } from \"react\";\nimport { Item, ItemStatesAndSetters } from '../types/item';\nimport { ItemDisplay } from '../components/ItemDisplay';\nimport { StorageContext } from '../contexts/storage';\n\nimport '../styles/newitemlist.css';\n\nconst itemListToText = (list: Item[]): string => {\n    let itemsText: string[] = [`${list[0].date.toLocaleDateString()}`, `${list.length} items`, ''];\n    list.forEach((item, index) => {\n        let commentString = item.comment ? ` (${item.comment})` : '';\n        itemsText.push(`${index + 1}. ${item.name}${commentString} : ${item.quantity} ${item.unit}`);\n    });\n\n    return itemsText.join('\\n');\n}\n\nexport function ItemList(props: {\n    list: Item[],\n    copyList?: boolean,\n    removeItem?: ((x: Item) => void),\n    newItemStatesAndSetters?: ItemStatesAndSetters\n}) {\n\n    let [copied, setCopied] = useState(false);\n\n    const handleCopy = () => {\n        navigator.clipboard.writeText(itemListToText(props.list))\n            .then(() => {\n                setCopied(true);\n                setTimeout(() => {\n                    setCopied(false);\n                }, 1000);\n            });\n    };\n\n    return (\n        <div>\n            <ol className=\"list-group list-group-numbered\" style={{maxHeight: \"80vh\", overflowY:\"auto\"}}>\n                {props.list.map(item =>\n                    <ItemDisplay item={item} key={item.name}\n                        newItemStatesAndSetters={props.newItemStatesAndSetters}\n                        removeItem={props.removeItem}/>)}\n            </ol>\n            <br/>\n            {\n                props.copyList && props.list.length > 0 &&\n                <input type=\"button\" value={copied ? 'Copied!' : 'Copy list'} className={\"btn \" + (copied ? \"btn-success\" : \"btn-primary\")}\n                    onClick={handleCopy}/>\n            }\n        </div>\n    );\n}\n\nexport function NewItemList(props: {\n    list: Item[],\n    removeItem: (x: Item) => void,\n    newItemStatesAndSetters: ItemStatesAndSetters,\n    setRunFetchEffect: (flag: boolean) => void\n}) {\n    const storage = useContext(StorageContext);\n\n    const clearNewItemControls = () => {\n        props.newItemStatesAndSetters.setName('');\n        props.newItemStatesAndSetters.setQuantity(0);\n        props.newItemStatesAndSetters.setUnit('');\n        props.newItemStatesAndSetters.setComment('');\n        props.newItemStatesAndSetters.setExisting(false);\n    };\n\n    const handleClear = () => {\n        if (props.list.length === 0)\n            return;\n\n        storage.clearUnsaved()?.then(() => {\n            clearNewItemControls();\n            props.setRunFetchEffect(true);\n        })\n    };\n\n    const handleSave = () => {\n        if (props.list.length === 0)\n            return;\n\n        const saveDate = new Date();\n        storage.saveUnsaved(saveDate)?.then(() => {\n            clearNewItemControls();\n            props.setRunFetchEffect(true);\n        });\n\n        navigator.clipboard.writeText(itemListToText(props.list));\n    };\n\n    return (\n        <div id=\"new-item-list-wrapper\">\n            <p>Shopping list({props.list.length})</p>\n            <ItemList list={props.list} newItemStatesAndSetters={props.newItemStatesAndSetters}\n                removeItem={props.removeItem}/>\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 10}}>\n                <input type=\"button\" value=\"Save and Copy\" className=\"btn btn-primary\"\n                    onClick={handleSave} style={{flexGrow: 0.40}} disabled={props.list.length === 0}></input>\n                <input type=\"button\" value=\"Clear\" className=\"btn btn-danger\"\n                    onClick={handleClear} style={{flexGrow: 0.40}} disabled={props.list.length === 0}></input>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport { Item, ItemStatesAndSetters } from '../types/item';\nimport { ItemControls } from \"../components/ItemControls\";\nimport { DebugItemLists } from \"../components/DebugItemLists\";\nimport { NewItemList } from '../components/ItemList';\nimport { useContext } from \"react\";\nimport { StorageContext } from \"../contexts/storage\";\n\nimport \"../styles/newlist.css\";\n\nexport function NewList(props: {\n    masterList: Set<string>;\n    masterItems: Item[];\n    setMasterList: React.Dispatch<React.SetStateAction<Set<string>>>;\n    newList: Item[];\n    setNewList: React.Dispatch<React.SetStateAction<Item[]>>;\n    newItemStatesAndSetters: ItemStatesAndSetters;\n    runFetchEffect: boolean;\n    setRunFetchEffect: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n    const storage = useContext(StorageContext);\n    let {\n        name,\n        setName,\n        setQuantity,\n        setUnit,\n        setComment,\n        setExisting\n    } = props.newItemStatesAndSetters;\n\n    const removeItem = (item: Item) => {\n        const nameToRemove = item.name;\n        const list = props.newList.filter(oldItem => oldItem.name !== nameToRemove);\n        storage.delete(item);\n        props.setNewList(list);\n        if (name === nameToRemove) {\n            setName('');\n            setQuantity(0);\n            setUnit('');\n            setComment('');\n            setExisting(false);\n        }\n    };\n\n    let debugMode = false;\n\n    return (\n        <div id=\"newlist-wrapper\">\n            <ItemControls masterList={props.masterList} setMasterList={props.setMasterList}\n                newList={props.newList} setNewList={props.setNewList}\n                masterItems={props.masterItems} newItemStatesAndSetters={props.newItemStatesAndSetters}/>\n            <NewItemList list={props.newList} newItemStatesAndSetters={props.newItemStatesAndSetters}\n                removeItem={removeItem} setRunFetchEffect={props.setRunFetchEffect}/>\n            {debugMode && <DebugItemLists masterList={props.masterList} newList={props.newList} />}\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Item } from '../types/item';\n\nexport function ListDisplay(props: {\n    date: number,\n    items: Item[],\n    selected: boolean;\n    setSelectedDate: React.Dispatch<React.SetStateAction<number>>;\n    readOnly: boolean;\n}) {\n    const handleListClick = () => {\n        props.setSelectedDate(props.date);\n    };\n\n    const removeList = () => {\n        // TODO: remove from items from db and re-fetch.\n    };\n\n    return (\n        <li className={\"list-group-item d-flex justify-content-between align-items-start\" + (props.selected ? \" active\" : \"\")}>\n            <div className=\"ms-2 me-auto\" style={{width: \"100vw\"}} onClick={handleListClick}>\n                <div className=\"fw-bold\" style={{display: \"inline\"}}>{new Date(props.date).toLocaleString()}</div>\n                <div>{props.items.length}&nbsp;items</div>\n            </div>\n            {!props.readOnly && <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={removeList}></button> }\n        </li>\n    );\n}","import React from \"react\";\nimport { Item } from '../types/item';\nimport { ListDisplay  } from \"../components/ListDisplay\";\nimport { ItemList } from \"../components/ItemList\";\nimport { useState } from \"react\";\n\nimport \"../styles/previouslists.css\";\n\nexport function PreviousLists(props: {\n    dateMap: Map<number, Item[]>;\n}) {\n    let [selectedDate, setSelectedDate] = useState<number>(0);\n    const dateList = [...props.dateMap.keys()].sort((date1, date2) => date2.valueOf() - date1.valueOf());\n    const selectedItems = props.dateMap.get(selectedDate);\n    return (\n        <div style={{marginLeft: 10, width: \"90%\"}}>\n            <p>Previous shopping lists({props.dateMap.size})</p>\n            <div id=\"previous-lists-wrapper\">\n                <div>\n                    <ol id=\"previous-lists\" className=\"list-group list-group-numbered\">\n                        { dateList.map(date =>\n                            <ListDisplay date={date} items={props.dateMap.get(date) || []}\n                                key={date} selected={date === selectedDate} setSelectedDate={setSelectedDate} readOnly={true}/> )}\n                    </ol>\n                </div>\n                <div id=\"previous-list-one\">\n                    { (selectedDate !== 0 && selectedItems !== undefined) && <ItemList list={selectedItems} copyList={true}/> }\n                </div>\n            </div>\n        </div>\n    );\n}","function UserData() {\n    return <h2>User data</h2>;\n}\n\nexport default UserData;","export type BooleanNumber = 0 | 1;\n\nexport type Item = {\n    name: string;\n    quantity: number;\n    unit: string;\n    comment: string;\n    date: Date;\n    saved: BooleanNumber;\n};\n\nexport type ItemStatesAndSetters = {\n    name: string;\n    setName: (name: string) => void;\n    quantity: number;\n    setQuantity: (qty: number) => void;\n    unit: string;\n    setUnit: (unit: string) => void;\n    comment: string;\n    setComment: (comment: string) => void;\n    date: Date;\n    setDate: (date: Date) => void;\n    existing: boolean;\n    setExisting: (val: boolean) => void;\n}\n\nexport function cloneItem(item: Item): Item {\n    return {\n        name: item.name,\n        quantity: item.quantity,\n        unit: item.unit,\n        comment: item.comment,\n        date: item.date,\n        saved: item.saved\n    };\n}","import { Item, cloneItem, BooleanNumber } from '../types/item';\n\nconst DB_NAME = 'shopping-list-app-db';\nconst DB_VERSION = 3;\nconst DB_SHOPPING_LIST_STORE_NAME = 'shopping-list-store';\n\nexport class ShoppingDatabase {\n    private db: IDBDatabase;\n    constructor (db: IDBDatabase) {\n        this.db = db;\n    }\n\n    getAllItems(maxCount: number = -1) {\n        return new Promise((resolve: (x: Item[]) => void, reject) => {\n            let objectStore = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME).objectStore(DB_SHOPPING_LIST_STORE_NAME);\n            let getReq = objectStore.getAll(null, maxCount > 0 ? maxCount : undefined);\n            getReq.onerror = function(event: Event) {\n                console.debug('getAllItems getAll() failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' getAll: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            };\n\n            getReq.onsuccess = function(this: IDBRequest<any[]>) {\n                console.debug('getAllItems: getAll() succeeded.');\n                resolve(this.result);\n            };\n        });\n    }\n\n    getItemsWithDate(date: Date, keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only, transaction?: IDBTransaction) {\n        return new Promise((resolve: (items: Item[]) => void, reject) => {\n            let objectStore = (transaction ? transaction : this.db.transaction(DB_SHOPPING_LIST_STORE_NAME))\n                .objectStore(DB_SHOPPING_LIST_STORE_NAME);\n            let getReq = objectStore.index('date').getAll(keyRangeOnly(date));\n\n            getReq.onerror = function(event: Event) {\n                console.debug('getItemsWithDate .index(\"date\").getAll() failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' index(\"date\").getAll: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            }\n\n            getReq.onsuccess = function(this: IDBRequest<any[]>) {\n                console.debug('getItemsWithDate .index(\"date\").getAll() succeeded');\n                resolve(this.result);\n            }\n        });\n    }\n\n    getItemsSaved(saved: BooleanNumber, keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only, transaction?: IDBTransaction) {\n        return new Promise((resolve: (items: Item[]) => void, reject) => {\n            let objectStore = (transaction ? transaction : this.db.transaction(DB_SHOPPING_LIST_STORE_NAME))\n                .objectStore(DB_SHOPPING_LIST_STORE_NAME);\n            let getReq = objectStore.index('saved').getAll(keyRangeOnly(saved));\n\n            getReq.onerror = function(event: Event) {\n                console.debug('getItemsSaved .index(\"date\").getAll() failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' index(\"date\").getAll: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            }\n\n            getReq.onsuccess = function(this: IDBRequest<any[]>) {\n                console.debug('getItemsSaved .index(\"date\").getAll() succeeded');\n                resolve(this.result);\n            }\n        });\n    }\n\n    deleteItem(item: Item, keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only) {\n        const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, \"readwrite\");\n        let objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n        return this.getItemsWithDate(item.date, keyRangeOnly, transaction).then((items) => {\n            return new Promise((resolve, reject) => {\n                console.debug('deleteItem: getItemsWithDate succeeded');\n                let found = false;\n                const onerror = (event: Event) => {\n                    console.debug('deleteItem add/update failed');\n                    reject(DB_SHOPPING_LIST_STORE_NAME + ' add/update failed: errCode' +\n                        event && event.target ? (event.target as any).errorCode : 'unknown');\n                }\n\n                const onsuccess = function() {\n                    console.debug('deleteItem: add/update succeeded.');\n                    resolve(undefined);\n                }\n\n                items.forEach(function(matchItem: any) {\n                    if (!found && matchItem.name === item.name && matchItem.saved === item.saved) {\n                        console.debug('deleteItem: found a matching item, deleting it...');\n                        let setReq = objectStore.delete(keyRangeOnly(matchItem.id));\n                        setReq.onerror = onerror;\n                        setReq.onsuccess = onsuccess;\n                        found = true;\n                    }\n                });\n\n                if (!found) {\n                    console.debug('warning: deleteItem no matching entry.');\n                    resolve(undefined);\n                }\n            });\n        }).catch((reason: any) => {\n            console.debug('deleteItem: getItemsWithDate() failed');\n            return Promise.reject(DB_SHOPPING_LIST_STORE_NAME + ' getItemsWithDate: reason ' + reason);\n        });;\n    }\n\n    clearAll() {\n        return new Promise((resolve, reject) => {\n            let request = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, \"readwrite\")\n                .objectStore(DB_SHOPPING_LIST_STORE_NAME).clear();\n            request.onerror = function(event: Event) {\n                console.debug('clearAll: clear() failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' clear: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            }\n\n            request.onsuccess = function(this: IDBRequest<undefined>) {\n                console.debug('clearAll: clear() succeeded');\n                resolve(this.result);\n            }\n        });\n    }\n\n    clearUnsaved(keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only) {\n        const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, \"readwrite\");\n        let objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n        return new Promise<undefined>((resolve, reject) => {\n            transaction.onerror = (event: Event) => {\n                console.debug('clearUnsaved: clear() failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' clear: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            };\n\n            transaction.oncomplete = function() {\n                console.debug('clearUnsaved: clear() succeeded');\n                resolve(undefined);\n            };\n\n            this.getItemsSaved(0, keyRangeOnly, transaction).then((items: Item[]) => {\n                items.forEach(function(clearItem: any) {\n                    objectStore.delete(keyRangeOnly(clearItem.id));\n                });\n            }); // catch is not necessary, it will reject in transaction.onerror().\n        });\n    }\n\n    addUpdateItem(item: Item, keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only) {\n        const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, \"readwrite\");\n        let objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n        return this.getItemsWithDate(item.date, keyRangeOnly, transaction).then((items: Item[]) => {\n            return new Promise((resolve, reject) => {\n                console.debug('addUpdateItem: getItemsWithDate succeeded');\n                let found = false;\n                const onerror = (event: Event) => {\n                    console.debug('addUpdateItem add/update failed');\n                    reject(DB_SHOPPING_LIST_STORE_NAME + ' add/update failed: errCode' +\n                        event && event.target ? (event.target as any).errorCode : 'unknown');\n                }\n\n                const onsuccess = function(this: IDBRequest<IDBValidKey>) {\n                    console.debug('addUpdateItem: add/update succeeded.');\n                    resolve(this.result);\n                }\n\n                items.forEach(function(prevItem: any) {\n                    if (!found && prevItem.name === item.name) {\n                        console.debug('addUpdateItem: found a matching item, updating it...');\n                        let itemClone = cloneItem(item) as any;\n                        itemClone.id = prevItem.id;\n                        let setReq = objectStore.put(itemClone);\n                        setReq.onerror = onerror;\n                        setReq.onsuccess = onsuccess;\n                        found = true;\n                    }\n                });\n\n                if (!found) {\n                    console.debug('addUpdateItem no matching entry yet');\n                    let setReq = objectStore.add(item);\n                    setReq.onerror = onerror;\n                    setReq.onsuccess = onsuccess;\n                    return;\n                }\n            });\n        }).catch((reason: any) => {\n            console.debug('addUpdateItem: getItemsWithDate() failed');\n            return Promise.reject(DB_SHOPPING_LIST_STORE_NAME + ' getItemsWithDate: reason ' + reason);\n        });\n    }\n\n    saveUnsaved(date: Date, keyRangeOnly: (x: any) => IDBKeyRange = IDBKeyRange.only) {\n        const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, \"readwrite\");\n        let objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n        return new Promise<undefined>((resolve, reject) => {\n            transaction.onerror = (event: Event) => {\n                console.debug('saveUnsaved: transaction failed');\n                reject(DB_SHOPPING_LIST_STORE_NAME + ' transaction: errCode' +\n                    event && event.target ? (event.target as any).errorCode : 'unknown');\n            };\n\n            transaction.oncomplete = function() {\n                console.debug('saveUnsaved: transaction succeeded');\n                resolve(undefined);\n            };\n\n            this.getItemsSaved(0, keyRangeOnly, transaction).then((items: Item[]) => {\n                items.forEach(function(unSavedItem: Item) {\n                    const newItem = cloneItem(unSavedItem);\n                    newItem.date = date;\n                    newItem.saved = 1;\n                    objectStore.put(newItem);\n                });\n                items.forEach(function(unSavedItem: any) {\n                    objectStore.delete(keyRangeOnly(unSavedItem.id));\n                });\n            }); // catch is not necessary, it will reject in transaction.onerror().\n        });\n    }\n}\n\nexport const openDb = (storageDb: IDBFactory, beSilent: boolean = false) => {\n    if (beSilent) {\n        console.debug = () => {};\n    }\n    return new Promise(function(resolve: (db: ShoppingDatabase) => any, reject) {\n        console.debug('Opening DB: ' + DB_NAME);\n        var openDbReq = storageDb.open(DB_NAME, DB_VERSION);\n        openDbReq.onsuccess = function(this: IDBRequest<IDBDatabase>) {\n            console.debug('Opened DB: ' + DB_NAME);\n            resolve(new ShoppingDatabase(this.result));\n        };\n        openDbReq.onerror = function(event: Event) {\n            reject('openDb failed errCode: ' +\n                event && event.target ? (event.target as any).errorCode : 'unknown');\n        };\n        openDbReq.onupgradeneeded = function (event: Event) {\n            console.debug(\"openDb.onupgradeneeded : \" + DB_NAME);\n            if (!event || !event.currentTarget || !(event.currentTarget as any).result) {\n                console.debug(\"openDb.onupgradeneeded : \" + DB_NAME + ' no new db in event!');\n                reject('onupgradeneeded: no new db!');\n                return;\n            }\n            const db: IDBDatabase = (event.currentTarget as any).result;\n            const tx: IDBTransaction = (event.target as any).transaction;\n\n            if (!db.objectStoreNames.contains(DB_SHOPPING_LIST_STORE_NAME)) {\n                let listStore = db.createObjectStore(DB_SHOPPING_LIST_STORE_NAME,\n                    { keyPath: 'id', autoIncrement: true});\n                listStore.createIndex('date', 'date', { unique: false });\n                listStore.createIndex('saved', 'saved', { unique: false });\n            } else {\n                let listStore = tx.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n                if(!listStore.indexNames.contains('saved')) {\n                    listStore.createIndex('saved', 'saved', { unique: false });\n                }\n            }\n        };\n        openDbReq.onblocked = function () {\n            console.debug(\"openDb.onupgradeneeded : \" + DB_NAME + ' blocked on other tabs');\n            reject('openDb upgrade: close other tabs and try again.');\n        }\n    });\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport './bootstrap.min.css';\nimport { useState } from \"react\";\nimport { Item, ItemStatesAndSetters } from './types/item';\nimport { useEffect } from \"react\";\n\n\nimport { NewList } from './pages/NewList';\nimport { PreviousLists } from  './pages/PreviousLists';\nimport UserData from './pages/UserData';\nimport { openDb } from './storage/storageDefs';\nimport { StorageType, StorageProvider } from './contexts/storage';\n\nlet storage = new StorageType();\n\n(function() {\n    openDb(indexedDB).then((db) => {\n      storage.setDB(db);\n      storage.fetch();\n    });\n})();\n\nfunction App() {\n  let [masterList, setMasterList] = useState(new Set<string>([]));\n  let [dbIsEmpty, setDBIsEmpty] = useState(false);\n  let [masterItems, setMasterItems] = useState([] as Item[]);\n  let [newList, setNewList] = useState<Item[]>([]);\n  let [dateMap, setDateMap] = useState<Map<number, Item[]>>(new Map<number, Item[]>());\n  let [name, setName] = useState('');\n  let [quantity, setQuantity] = useState(0);\n  let [unit, setUnit] = useState('');\n  let [comment, setComment] = useState('');\n  let [date, setDate] = useState(new Date());\n  let [existing, setExisting] = useState(false);\n  let [runFetchEffect, setRunFetchEffect] = useState(false);\n  let itemStatesAndSetters: ItemStatesAndSetters = {\n      name,\n      setName,\n      quantity,\n      setQuantity,\n      unit,\n      setUnit,\n      comment,\n      setComment,\n      existing,\n      setExisting,\n      date,\n      setDate\n  };\n\n  // fetch initial state from DB.\n  useEffect(() => {\n      if (!runFetchEffect && (masterList.size || dbIsEmpty)) {\n          return;\n      }\n\n      if (storage.hasDB()) {\n          // console.log('Fetching...');\n          storage.fetch();\n      }\n\n      const dbListener = (mList: Item[]) => {\n          if (runFetchEffect)\n              setRunFetchEffect(false);\n          setDBIsEmpty((mList.length === 0));\n          setMasterList(new Set<string>(mList.map(item => item.name)));\n          const nameToItem = new Map<string, Item>();\n          const currentList: Item[] = [];\n          const dateMapTemp = new Map<number, Item[]>();\n          mList.forEach((item) => {\n              if (!item.saved)\n                  currentList.push(item);\n\n              let prevItem = nameToItem.get(item.name);\n              if (!prevItem)\n                  nameToItem.set(item.name, item);\n              else if (prevItem.date < item.date)\n                  nameToItem.set(item.name, item);\n\n              if (item.saved) {\n                const dateItemList = dateMapTemp.get(item.date.valueOf());\n                if (!dateItemList)\n                  dateMapTemp.set(item.date.valueOf(), [item]);\n                else\n                  dateItemList.push(item);\n              }\n          });\n          setMasterItems([...nameToItem.values()]);\n          setNewList(currentList);\n          if (currentList.length) {\n              setDate(currentList[0].date);\n          }\n          setDateMap(dateMapTemp);\n      };\n      storage.addListener(dbListener);\n\n      return function cleanup() {\n          storage.removeListener(dbListener);\n      };\n  });\n\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul className=\"nav\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">New list</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/previous\" className=\"nav-link\">Previous lists</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/userdata\" className=\"nav-link\">User data</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <StorageProvider value={storage}>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/userdata\">\n              <UserData />\n            </Route>\n            <Route path=\"/previous\">\n                <PreviousLists dateMap={dateMap}/>\n            </Route>\n            <Route path=\"/\">\n                <NewList masterList={masterList} setMasterList={setMasterList}\n                  newList={newList} setNewList={setNewList}\n                  masterItems={masterItems} newItemStatesAndSetters={itemStatesAndSetters}\n                  runFetchEffect={runFetchEffect} setRunFetchEffect={setRunFetchEffect}/>\n            </Route>\n          </Switch>\n        </StorageProvider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}