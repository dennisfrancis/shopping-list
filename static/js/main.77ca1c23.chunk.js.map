{"version":3,"sources":["consts/itemConsts.ts","contexts/storage.ts","components/ItemControls.tsx","types/item.ts","components/ItemDisplay.tsx","components/ItemList.tsx","pages/NewList.tsx","components/ListDisplay.tsx","pages/PreviousLists.tsx","pages/DataPage.tsx","storage/storageDefs.ts","App.tsx","index.tsx"],"names":["Units","Set","Categories","StorageType","db","undefined","listeners","this","invokeListeners","bind","items","forEach","listener","getAllItems","then","add","delete","item","addUpdateItem","deleteItem","clearUnsaved","Promise","saveDate","saveUnsaved","exportToJSON","obj","JSON","stringify","jsonText","res","importFromJSON","StorageContext","React","createContext","StorageProvider","Provider","ItemControls","props","storage","useContext","newItemStatesAndSetters","newItemName","name","setNewItemName","setName","quantity","setQuantity","unit","setUnit","comment","setComment","existing","setExisting","date","category","setCategory","nextList","masterList","masterItem","newList","find","push","id","className","htmlFor","type","list","aria-label","onChange","e","currentTarget","value","masterItems","findIndex","required","map","min","qty","parseFloat","Math","round","cat","style","display","flexDirection","justifyContent","onClick","preventDefault","addUpdate","saved","setNewList","currList","matchItemIndex","listCopy","matchItem","setMasterList","currentSet","has","newSet","flexGrow","cloneItem","getItemFromObject","objSrc","Date","ItemDisplay","selected","width","fontStyle","color","removeItem","itemListToText","message","window","localStorage","getItem","itemsText","toLocaleDateString","length","sublists","Map","sub","get","set","categories","keys","sort","repeat","index","commentString","join","ItemList","useState","copied","setCopied","history","useHistory","height","overflowY","copyList","navigator","clipboard","writeText","setTimeout","newDate","outMap","outList","NewItemList","clearNewItemControls","marginTop","setRunFetchEffect","disabled","NewList","nameToRemove","filter","oldItem","ListDisplay","setSelectedDate","toLocaleString","readOnly","PreviousLists","selectedDate","dateList","dateMap","date1","date2","valueOf","selectedItems","marginLeft","size","DataPage","setMessage","importStatus","setImportStatus","exportToJSONText","text","a","document","createElement","file","Blob","href","URL","createObjectURL","download","click","marginBottom","inp","getElementById","files","importFromJSONText","accept","placeholder","rows","setItem","DB_NAME","DB_SHOPPING_LIST_STORE_NAME","ShoppingDatabase","maxCount","resolve","reject","getReq","transaction","objectStore","getAll","onerror","event","console","debug","Error","error","onsuccess","result","keyRangeOnly","IDBKeyRange","only","getItemsWithDate","found","setReq","catch","reason","request","clear","oncomplete","getItemsSaved","clearItem","prevItem","itemClone","put","unSavedItem","newItem","jsonString","parse","Array","isArray","itemObj","repr","retVal","clearAll","i","useEffect","storageDb","openDbReq","open","onupgradeneeded","tx","target","objectStoreNames","contains","listStore","indexNames","createIndex","unique","createObjectStore","keyPath","autoIncrement","onblocked","openDb","indexedDB","setDB","fetch","App","dbIsEmpty","setDBIsEmpty","setMasterItems","setDateMap","setDate","runFetchEffect","itemStatesAndSetters","hasDB","dbListener","mList","nameToItem","currentList","dateMapTemp","dateItemList","values","addListener","removeListener","to","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.77ca1c23.chunk.js","sourcesContent":["export const Units = new Set([\n  'Kg',\n  'gm',\n  'Packet(s)',\n  'No',\n]);\n\nexport const Categories = new Set([\n  'Vegetables',\n  'Fruits',\n  'Medicines',\n]);\n","import React from 'react';\nimport { Item } from '../types/item';\nimport { ShoppingDatabase } from '../storage/storageDefs';\n\n// eslint-disable-next-line no-unused-vars\ntype ListenerType = (x: Item[]) => void;\n\nexport class StorageType {\n  private db: ShoppingDatabase | undefined = undefined;\n\n  private listeners = new Set<ListenerType>();\n\n  constructor(db?: ShoppingDatabase) {\n    this.db = db;\n    this.invokeListeners = this.invokeListeners.bind(this);\n  }\n\n  public setDB(db: ShoppingDatabase): void {\n    this.db = db;\n  }\n\n  public hasDB(): boolean {\n    return !!this.db;\n  }\n\n  private invokeListeners(items: Item[]): void {\n    // console.log('Invoking ' + this.masterListeners.size + ' master listeners.');\n    this.listeners.forEach((listener) => {\n      listener(items);\n    });\n  }\n\n  public fetch(): void {\n    if (!this.db) {\n      return;\n    }\n\n    this.db.getAllItems().then(this.invokeListeners);\n  }\n\n  public addListener(listener: ListenerType): void {\n    this.listeners.add(listener);\n  }\n\n  public removeListener(listener: ListenerType): void {\n    this.listeners.delete(listener);\n  }\n\n  public addUpdate(item: Item): void {\n    if (!this.db) {\n      return;\n    }\n\n    this.db.addUpdateItem(item);\n  }\n\n  public delete(item: Item): void {\n    if (!this.db) {\n      return;\n    }\n\n    this.db.deleteItem(item);\n  }\n\n  public clearUnsaved(): Promise<undefined> {\n    if (!this.db) {\n      return new Promise<undefined>(() => undefined);\n    }\n\n    return this.db.clearUnsaved();\n  }\n\n  public saveUnsaved(saveDate: Date): Promise<undefined> {\n    if (!this.db) {\n      return new Promise<undefined>(() => undefined);\n    }\n\n    return this.db.saveUnsaved(saveDate);\n  }\n\n  public async exportToJSONText(): Promise<string> {\n    let obj;\n    try {\n      obj = await this.db?.exportToJSON();\n    } catch (e) {\n      return '';\n    }\n\n    return JSON.stringify(obj);\n  }\n\n  public async importFromJSONText(jsonText: string): Promise<boolean> {\n    let res = false;\n    try {\n      res = !!await this.db?.importFromJSON(jsonText);\n    } catch (e) {\n      return false;\n    }\n\n    return res;\n  }\n}\n\nexport const StorageContext = React.createContext({} as StorageType);\nexport const StorageProvider = StorageContext.Provider;\n","/* eslint-disable */\nimport React from \"react\";\nimport { useContext } from \"react\";\nimport { Categories, Units } from \"../consts/itemConsts\";\nimport { StorageContext } from \"../contexts/storage\";\nimport { Item, ItemStatesAndSetters } from '../types/item';\n\nimport '../styles/itemcontrols.css';\n\ntype ItemControlProps = {\n    masterList: Set<string>;\n    masterItems: Item[];\n    setMasterList: React.Dispatch<React.SetStateAction<Set<string>>>;\n    newList: Item[];\n    setNewList: React.Dispatch<React.SetStateAction<Item[]>>;\n    newItemStatesAndSetters: ItemStatesAndSetters;\n};\n\nexport function ItemControls(props: ItemControlProps) {\n    const storage = useContext(StorageContext)\n    let {\n        name: newItemName,\n        setName: setNewItemName,\n        quantity,\n        setQuantity,\n        unit,\n        setUnit,\n        comment,\n        setComment,\n        existing,\n        setExisting,\n        date,\n        category,\n        setCategory,\n    } = props.newItemStatesAndSetters;\n\n    let nextList:string[] = [];\n    props.masterList.forEach(masterItem => {\n        if (!props.newList.find(item => item.name === masterItem))\n            nextList.push(masterItem);\n    });\n\n    function handleNewItem(e: React.FormEvent<HTMLInputElement>) {\n        e.preventDefault();\n\n        if (!newItemName || !quantity || !unit)\n            return;\n\n        storage.addUpdate({name: newItemName, quantity, unit, comment, saved: 0, date, category});\n        props.setNewList(currList => {\n            let matchItemIndex = currList.findIndex((item) => item.name === newItemName);\n            if (matchItemIndex === -1) {\n                return [...currList, {name: newItemName, quantity, unit, comment, saved: 0, date, category}];\n            }\n\n            let listCopy = [...currList];\n            let matchItem = listCopy[matchItemIndex];\n            matchItem.quantity = quantity;\n            matchItem.unit = unit;\n            matchItem.comment = comment;\n            matchItem.category = category;\n            return listCopy;\n        });\n\n        props.setMasterList(currentSet => {\n            if (currentSet.has(newItemName))\n                return currentSet;\n            let newSet = new Set<string>(currentSet);\n            newSet.add(newItemName);\n            return newSet;\n        });\n        setNewItemName('');\n        setQuantity(0);\n        setUnit('');\n        setComment('');\n        setExisting(false);\n        setCategory(undefined);\n    }\n\n    function handleItemNameChange(e: React.FormEvent<HTMLInputElement>) {\n        setNewItemName(e.currentTarget.value);\n        let masterItem = props.masterItems.find((item) => item.name === e.currentTarget.value);\n        if (masterItem) {\n            setQuantity(masterItem.quantity);\n            setUnit(masterItem.unit);\n            setUnit(masterItem.unit);\n            setComment(masterItem.comment);\n            setCategory(masterItem.category);\n        }\n        setExisting(props.newList.findIndex((item) => item.name === e.currentTarget.value) !== -1);\n    }\n\n    function handleQtyChange(e: React.FormEvent<HTMLInputElement>) {\n        if (e.currentTarget.value === '') {\n            setQuantity(0);\n            return;\n        }\n        const qty = parseFloat(e.currentTarget.value);\n        setQuantity(Math.round(qty * 10) / 10);\n    }\n\n    function handleUnitChange(e: React.FormEvent<HTMLInputElement>) {\n        setUnit(e.currentTarget.value);\n    }\n\n    function handleCommentsChange(e: React.FormEvent<HTMLInputElement>) {\n        setComment(e.currentTarget.value);\n    }\n\n    function handleClear() {\n        setNewItemName('');\n        setQuantity(0);\n        setUnit('');\n        setComment('');\n        setExisting(false);\n        setCategory(undefined);\n    }\n\n    function handleCategoryChange(e: React.FormEvent<HTMLInputElement>) {\n        setCategory(e.currentTarget.value === '' ? undefined : e.currentTarget.value);\n    }\n\n    return (\n        <form id=\"item-controls\">\n            <div className=\"mb-3\">\n                <label htmlFor=\"item-search\" className=\"form-label\">Item name</label>\n                <input type=\"search\" id=\"item-search\" className=\"form-control bottom-border-only\"\n                    list=\"next-item-list\"\n                    aria-label=\"Search through master list\"\n                    onChange={handleItemNameChange}\n                    value={newItemName}\n                    required></input>\n            </div>\n\n            <datalist id=\"next-item-list\">\n                {nextList.map(item => <option key={item} value={item}/>)}\n            </datalist>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"qty-input\" className=\"form-label\">Quantity</label>\n                <input type=\"number\" className=\"form-control bottom-border-only\"\n                    id=\"qty-input\"\n                    aria-label=\"Quantity\"\n                    min={1}\n                    required\n                    onChange={handleQtyChange}\n                    value={quantity === 0 ? '' : (quantity + '')}></input>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"unit-input\" className=\"form-label\">Unit</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"unit-input\"\n                    list=\"unit-list\"\n                    aria-label=\"Unit\"\n                    required\n                    onChange={handleUnitChange}\n                    value={unit}></input>\n            </div>\n\n            <datalist id=\"unit-list\">\n                {[...Units].map(unit => <option key={unit} value={unit}/>)}\n            </datalist>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"comments-input\" className=\"form-label\">Comments</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"comments-input\"\n                    aria-label=\"Comments\"\n                    onChange={handleCommentsChange}\n                    value={comment}></input>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"category-input\" className=\"form-label\">Category</label>\n                <input type=\"text\" className=\"form-control bottom-border-only\"\n                    id=\"category-input\"\n                    list=\"category-list\"\n                    aria-label=\"Unit\"\n                    required\n                    onChange={handleCategoryChange}\n                    value={category === undefined ? '' : category}></input>\n            </div>\n\n            <datalist id=\"category-list\">\n                {[...Categories].map(cat => <option key={cat} value={cat}/>)}\n            </datalist>\n\n            <br></br>\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\n                <input type=\"submit\" value={existing ? \"Modify\" : \"Add\"} className=\"btn btn-primary\"\n                    onClick={handleNewItem} style={{flexGrow: 0.40}}></input>\n                <input type=\"button\" value=\"Clear\" className=\"btn btn-danger\"\n                    onClick={handleClear} style={{flexGrow: 0.40}}></input>\n            </div>\n        </form>\n    );\n};\n","/* eslint-disable no-unused-vars */\nexport type BooleanNumber = 0 | 1;\n\nexport type Item = {\n  name: string;\n  quantity: number;\n  unit: string;\n  comment: string;\n  date: Date;\n  saved: BooleanNumber;\n  category: string | undefined;\n};\n\nexport type ItemStatesAndSetters = {\n  name: string;\n  setName: (name: string) => void;\n  quantity: number;\n  setQuantity: (qty: number) => void;\n  unit: string;\n  setUnit: (unit: string) => void;\n  comment: string;\n  setComment: (comment: string) => void;\n  date: Date;\n  setDate: (date: Date) => void;\n  existing: boolean;\n  setExisting: (val: boolean) => void;\n  category: string | undefined;\n  setCategory: (category: string | undefined) => void;\n}\n\nexport function cloneItem(item: Item): Item {\n  return {\n    name: item.name,\n    quantity: item.quantity,\n    unit: item.unit,\n    comment: item.comment,\n    date: item.date,\n    saved: item.saved,\n    category: item.category,\n  };\n}\n\nexport type JSONRepresentationType = {\n  items: Item[];\n  name: string;\n  message: string;\n}\n\nexport type ItemLikeObject = {\n  name?: unknown;\n  quantity?: unknown;\n  unit?: unknown;\n  comment?: unknown;\n  date?: unknown;\n  saved?: unknown;\n  category?: unknown;\n}\n\nexport function getItemFromObject(objSrc: unknown): Item | undefined {\n  if (typeof objSrc !== 'object') {\n    return undefined;\n  }\n\n  const obj = objSrc as ItemLikeObject;\n\n  if (typeof obj.name !== 'string' ||\n    typeof obj.quantity !== 'number' ||\n    typeof obj.unit !== 'string' ||\n    typeof obj.comment !== 'string' ||\n    typeof obj.date !== 'string' ||\n    typeof obj.saved !== 'number' ||\n    (typeof obj.category !== 'string' && typeof obj.category !== 'undefined')) {\n    return undefined;\n  }\n\n  return {\n    name: obj.name,\n    quantity: obj.quantity,\n    unit: obj.unit,\n    comment: obj.comment,\n    date: new Date(obj.date),\n    saved: obj.saved as BooleanNumber,\n    category: obj.category,\n  };\n}\n\nexport interface StorageMin {\n  clear(): void;\n  getItem(key: string): string | null;\n  removeItem(key: string): void;\n  setItem(key: string, value: string): void;\n}\n","/* eslint-disable */\nimport React from 'react';\nimport { Item, ItemStatesAndSetters } from \"../types/item\";\n\nexport function ItemDisplay(props: {\n    item: Item,\n    newItemStatesAndSetters?: ItemStatesAndSetters,\n    removeItem?: (x: Item) => void\n}) {\n    const handleItemClick = () => {\n        if (!props.newItemStatesAndSetters)\n            return;\n\n        props.newItemStatesAndSetters.setName(props.item.name);\n        props.newItemStatesAndSetters.setQuantity(props.item.quantity);\n        props.newItemStatesAndSetters.setUnit(props.item.unit);\n        props.newItemStatesAndSetters.setComment(props.item.comment);\n        props.newItemStatesAndSetters.setExisting(true);\n        props.newItemStatesAndSetters.setCategory(props.item.category);\n    };\n\n    let selected = props.newItemStatesAndSetters ? (props.newItemStatesAndSetters.name === props.item.name) : false;\n    const removeItem = () => {\n        if (props.removeItem)\n            props.removeItem(props.item);\n    };\n    return (\n        <li className={\"list-group-item d-flex justify-content-between align-items-start\" + (selected ? \" active\" : \"\")}>\n            <div className=\"ms-2 me-auto\" style={{width: \"100vw\"}} onClick={handleItemClick}>\n                <div className=\"fw-bold\" style={{display: \"inline\"}}>{props.item.name + (props.item.comment ? ' (' + props.item.comment + ')' : '')}</div>\n                <div>{props.item.quantity}&nbsp;{props.item.unit}&nbsp;\n                    { (props.item.category !== undefined) && <small style={{fontStyle: \"italic\", color: \"red\"}}>{'#' + props.item.category}</small> }</div>\n            </div>\n            {props.removeItem && <button type=\"button\" className={(selected ? \"btn-close btn-close-white\" : \"btn-close\")} aria-label=\"Close\" onClick={removeItem}></button>}\n        </li>\n    );\n}","/* eslint-disable */\nimport { useContext, useState } from \"react\";\nimport { Item, ItemStatesAndSetters, cloneItem } from '../types/item';\nimport { ItemDisplay } from '../components/ItemDisplay';\nimport { StorageContext } from '../contexts/storage';\nimport { useHistory } from 'react-router-dom';\n\nimport '../styles/newitemlist.css';\n\nconst itemListToText = (list: Item[]): string => {\n    let message = window.localStorage.getItem('settings_message');\n    let itemsText: string[] = !message ? [`${list[0].date.toLocaleDateString()}`, `${list.length} items`, ''] :\n        [message, ''];\n\n    let sublists = new Map<string, Item[]>();\n    const cat2String = (category: string | undefined) => category === undefined ? '' : category;\n    list.forEach(item => {\n        const cat = cat2String(item.category);\n        const sub = sublists.get(cat);\n        if (sub)\n            sub.push(item);\n        else\n            sublists.set(cat, [item]);\n    });\n\n    let categories = [...sublists.keys()];\n    categories.sort();\n\n    categories.forEach((cat: string) => {\n        if (cat === '') {\n            itemsText.push('');\n        } else {\n            itemsText.push('');\n            itemsText.push(cat);\n            itemsText.push('='.repeat(cat.length));\n        }\n\n        const items = sublists.get(cat) as Item[];\n        items.forEach((item, index) => {\n            let commentString = item.comment ? ` (${item.comment})` : '';\n            itemsText.push(`${index + 1}. ${item.name}${commentString} : ${item.quantity} ${item.unit}`);\n        });\n    });\n\n    return itemsText.join('\\n');\n}\n\nexport function ItemList(props: {\n    list: Item[],\n    copyList?: boolean,\n    removeItem?: ((x: Item) => void),\n    newItemStatesAndSetters?: ItemStatesAndSetters,\n    setNewList?: React.Dispatch<React.SetStateAction<Item[]>>,\n    date?: Date\n}) {\n\n    let [copied, setCopied] = useState(false);\n    const storage = useContext(StorageContext);\n    let history = useHistory();\n\n    const handleCopy = () => {\n        navigator.clipboard.writeText(itemListToText(props.list))\n            .then(() => {\n                setCopied(true);\n                setTimeout(() => {\n                    setCopied(false);\n                }, 1000);\n            });\n    };\n\n    const handleNewListFrom = function(e: React.FormEvent<HTMLInputElement>) {\n        e.preventDefault();\n\n        if (!props.setNewList) {\n            return;\n        }\n\n        props.setNewList(currList => {\n            if (!props.list) {\n                return currList;\n            }\n\n            let newDate = props.date || new Date();\n\n            let outMap = new Map<string, Item>();\n            currList.forEach((item) => {\n                outMap.set(item.name, item);\n            });\n\n            props.list.forEach((item) => {\n                item = cloneItem(item);\n                item.saved = 0;\n                item.date = newDate;\n                outMap.set(item.name, item);\n            });\n\n            let outList: Item[] = [];\n            outMap.forEach((item) => {\n                outList.push(item);\n                storage.addUpdate(item);\n            });\n\n            return outList;\n        });\n\n        history.push('/');\n    }\n\n    return (\n        <div style={{height: \"calc(100vh - 220px)\"}}>\n            <ol className=\"list-group list-group-flush list-group-numbered\" style={{height: \"100%\", overflowY:\"auto\"}}>\n                {props.list.map(item =>\n                    <ItemDisplay item={item} key={item.name}\n                        newItemStatesAndSetters={props.newItemStatesAndSetters}\n                        removeItem={props.removeItem}/>)}\n            </ol>\n            <br/>\n            {\n                props.copyList && props.list.length > 0 &&\n                <input type=\"button\" value={copied ? 'Copied!' : 'Copy list'} className={\"btn \" + (copied ? \"btn-success\" : \"btn-primary\")}\n                    onClick={handleCopy}/>\n            }\n            {\n                props.setNewList && props.date && props.list.length > 0 &&\n                <input type=\"button\" value=\"Create new list\" className=\"btn btn-primary\"\n                    onClick={handleNewListFrom}/>\n            }\n        </div>\n    );\n}\n\nexport function NewItemList(props: {\n    list: Item[],\n    removeItem: (x: Item) => void,\n    newItemStatesAndSetters: ItemStatesAndSetters,\n    setRunFetchEffect: (flag: boolean) => void\n}) {\n    const storage = useContext(StorageContext);\n\n    const clearNewItemControls = () => {\n        props.newItemStatesAndSetters.setName('');\n        props.newItemStatesAndSetters.setQuantity(0);\n        props.newItemStatesAndSetters.setUnit('');\n        props.newItemStatesAndSetters.setComment('');\n        props.newItemStatesAndSetters.setExisting(false);\n        props.newItemStatesAndSetters.setCategory(undefined);\n    };\n\n    const handleClear = () => {\n        if (props.list.length === 0)\n            return;\n\n        storage.clearUnsaved()?.then(() => {\n            clearNewItemControls();\n            props.setRunFetchEffect(true);\n        })\n    };\n\n    const handleSave = () => {\n        if (props.list.length === 0)\n            return;\n\n        const saveDate = new Date();\n        storage.saveUnsaved(saveDate)?.then(() => {\n            clearNewItemControls();\n            props.setRunFetchEffect(true);\n        });\n\n        navigator.clipboard.writeText(itemListToText(props.list));\n    };\n\n    return (\n        <div id=\"new-item-list-wrapper\">\n            <p>Shopping list({props.list.length})</p>\n            <ItemList list={props.list} newItemStatesAndSetters={props.newItemStatesAndSetters}\n                removeItem={props.removeItem}/>\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 25}}>\n                <input type=\"button\" value=\"Save and Copy\" className=\"btn btn-primary\"\n                    onClick={handleSave} style={{flexGrow: 0.40}} disabled={props.list.length === 0}></input>\n                <input type=\"button\" value=\"Clear\" className=\"btn btn-danger\"\n                    onClick={handleClear} style={{flexGrow: 0.40}} disabled={props.list.length === 0}></input>\n            </div>\n        </div>\n    );\n}","/* eslint-disable */\nimport React from \"react\";\nimport { Item, ItemStatesAndSetters } from '../types/item';\nimport { ItemControls } from \"../components/ItemControls\";\nimport { DebugItemLists } from \"../components/DebugItemLists\";\nimport { NewItemList } from '../components/ItemList';\nimport { useContext } from \"react\";\nimport { StorageContext } from \"../contexts/storage\";\n\nimport \"../styles/newlist.css\";\n\nexport function NewList(props: {\n    masterList: Set<string>;\n    masterItems: Item[];\n    setMasterList: React.Dispatch<React.SetStateAction<Set<string>>>;\n    newList: Item[];\n    setNewList: React.Dispatch<React.SetStateAction<Item[]>>;\n    newItemStatesAndSetters: ItemStatesAndSetters;\n    runFetchEffect: boolean;\n    setRunFetchEffect: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n    const storage = useContext(StorageContext);\n    let {\n        name,\n        setName,\n        setQuantity,\n        setUnit,\n        setComment,\n        setExisting,\n        setCategory,\n    } = props.newItemStatesAndSetters;\n\n    const removeItem = (item: Item) => {\n        const nameToRemove = item.name;\n        const list = props.newList.filter(oldItem => oldItem.name !== nameToRemove);\n        storage.delete(item);\n        props.setNewList(list);\n        if (name === nameToRemove) {\n            setName('');\n            setQuantity(0);\n            setUnit('');\n            setComment('');\n            setExisting(false);\n            setCategory(undefined);\n        }\n    };\n\n    let debugMode = false;\n\n    return (\n        <div id=\"newlist-wrapper\">\n            <ItemControls masterList={props.masterList} setMasterList={props.setMasterList}\n                newList={props.newList} setNewList={props.setNewList}\n                masterItems={props.masterItems} newItemStatesAndSetters={props.newItemStatesAndSetters}/>\n            <div className=\"sepline\"></div>\n            <NewItemList list={props.newList} newItemStatesAndSetters={props.newItemStatesAndSetters}\n                removeItem={removeItem} setRunFetchEffect={props.setRunFetchEffect}/>\n            {debugMode && <DebugItemLists masterList={props.masterList} newList={props.newList} />}\n            <br></br>\n        </div>\n    );\n}\n","/* eslint-disable */\nimport React from \"react\";\nimport { Item } from '../types/item';\n\nexport function ListDisplay(props: {\n    date: number,\n    items: Item[],\n    selected: boolean;\n    setSelectedDate: React.Dispatch<React.SetStateAction<number>>;\n    readOnly: boolean;\n}) {\n    const handleListClick = () => {\n        props.setSelectedDate(props.date);\n    };\n\n    const removeList = () => {\n        // TODO: remove from items from db and re-fetch.\n    };\n\n    return (\n        <li className={\"list-group-item d-flex justify-content-between align-items-start\" + (props.selected ? \" active\" : \"\")}>\n            <div className=\"ms-2 me-auto\" style={{width: \"100vw\"}} onClick={handleListClick}>\n                <div className=\"fw-bold\" style={{display: \"inline\"}}>{new Date(props.date).toLocaleString()}</div>\n                <div>{props.items.length}&nbsp;items</div>\n            </div>\n            {!props.readOnly && <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={removeList}></button> }\n        </li>\n    );\n}","/* eslint-disable */\nimport React from \"react\";\nimport { Item, cloneItem } from '../types/item';\nimport { ListDisplay  } from \"../components/ListDisplay\";\nimport { ItemList } from \"../components/ItemList\";\nimport { useState } from \"react\";\n\nimport \"../styles/previouslists.css\";\n\nexport function PreviousLists(props: {\n    dateMap: Map<number, Item[]>;\n    setNewList: React.Dispatch<React.SetStateAction<Item[]>>;\n    date: Date;\n}) {\n    let [selectedDate, setSelectedDate] = useState<number>(0);\n    const dateList = [...props.dateMap.keys()].sort((date1, date2) => date2.valueOf() - date1.valueOf());\n    const selectedItems = props.dateMap.get(selectedDate);\n    return (\n        <div style={{marginLeft: 10, width: \"90%\"}}>\n            <p>Previous shopping lists({props.dateMap.size})</p>\n            <div id=\"previous-lists-wrapper\">\n                <div>\n                    <ol id=\"previous-lists\" className=\"list-group list-group-flush list-group-numbered\">\n                        { dateList.map(date =>\n                            <ListDisplay date={date} items={props.dateMap.get(date) || []}\n                                key={date} selected={date === selectedDate} setSelectedDate={setSelectedDate} readOnly={true}/> )}\n                    </ol>\n                </div>\n                { dateList.length !== 0 && <div className=\"sepline\"></div> }\n                <div id=\"previous-list-one\">\n                    {\n                        (selectedDate !== 0 && selectedItems !== undefined) &&\n                        <ItemList list={selectedItems} copyList={true} setNewList={props.setNewList} date={props.date} />\n                    }\n                </div>\n            </div>\n            <br></br>\n        </div>\n    );\n}","/* eslint-disable */\nimport { useContext, useState } from \"react\";\nimport { StorageContext } from \"../contexts/storage\";\n\nimport '../styles/datapage.css'\n\nfunction DataPage(props: {\n    setRunFetchEffect: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n    let [name, setName] = useState(window.localStorage.getItem('settings_name'));\n    let [message, setMessage] = useState(window.localStorage.getItem('settings_message'));\n    let [importStatus, setImportStatus] = useState(0);\n\n    const storage = useContext(StorageContext);\n\n    function handleNameChange(e: React.FormEvent<HTMLInputElement>) {\n        setName(e.currentTarget.value)\n    }\n\n    function handleMessageChange(e: React.FormEvent<HTMLTextAreaElement>) {\n        setMessage(e.currentTarget.value);\n    }\n\n    function handleSave() {\n        if (name) {\n            window.localStorage.setItem('settings_name', name);\n        }\n\n        if (message) {\n            window.localStorage.setItem('settings_message', message);\n        }\n    }\n\n    function handleClear() {\n        window.localStorage.removeItem('settings_name');\n        window.localStorage.removeItem('settings_message');\n        setName('');\n        setMessage('');\n    }\n\n    function handleExport() {\n        storage.exportToJSONText().then(function (text) {\n            let a = document.createElement(\"a\");\n            let file = new Blob([text], {type: 'text/plain'});\n            a.href = URL.createObjectURL(file);\n            a.download = 'shopping-list-export-' + (new Date()).toLocaleDateString() + '.json';\n            a.click();\n        });\n    }\n\n    function handleImport() {\n        let inp = document.getElementById('importFile');\n        inp?.click();\n    }\n\n    function handleImportFile() {\n        let inp = document.getElementById('importFile') as HTMLInputElement;\n        if (!inp || !inp.files || !inp.files.length)\n            return;\n        inp.files[0].text().then(function (jsonText) {\n            return storage.importFromJSONText(jsonText);\n        }).then((res: boolean) => {\n            if (res) {\n                onLocalStorageChanged();\n                props.setRunFetchEffect(true);\n            }\n            setImportStatus(res ? 1 : -1);\n            setTimeout(() => {\n                setImportStatus(0);\n            }, 1000);\n            return true;\n        });\n    }\n\n    function onLocalStorageChanged() {\n        setName(window.localStorage.getItem('settings_name'));\n        setMessage(window.localStorage.getItem('settings_message'))\n    }\n\n    return (\n        <div id=\"data-page\">\n            <div id=\"import-export\">\n                    <input type=\"button\" value={\"Export Data\"} className=\"data-button data-export-button\"\n                            onClick={handleExport} style={{marginBottom: 20}}></input>\n                    <input type=\"button\" value={importStatus === 0 ? \"Import from file\" : (importStatus === -1 ? \"Import failed!\" : \"Import successful!\")}\n                            className=\"data-button data-import-button\"\n                            onClick={handleImport}></input>\n                    <input type=\"file\" id=\"importFile\" onChange={handleImportFile}\n                        style={{display: \"none\"}} accept=\".json\"></input>\n            </div>\n            <br></br>\n            <div className=\"sepline-horiz\"></div>\n            <form id=\"settings-form\">\n                <h5>Delivery Information</h5>\n                <br></br>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"settings-name\" className=\"form-label\">Name</label>\n                    <input type=\"text\" id=\"settings-name\" className=\"form-control\"\n                        aria-label=\"Your name\"\n                        placeholder=\"Your name\"\n                        onChange={handleNameChange}\n                        value={name ? name : ''}>\n                    </input>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"settings-message\" className=\"form-label\">Custom message for delivery</label>\n                    <textarea id=\"settings-message\" className=\"form-control\"\n                        rows={6}\n                        aria-label=\"Your message\"\n                        placeholder=\"Your message\"\n                        onChange={handleMessageChange}\n                        value={message ? message : ''}>\n                    </textarea>\n                </div>\n                <br></br>\n                <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\n                    <input type=\"submit\" value={\"Save\"} className=\"btn btn-success\"\n                        onClick={handleSave} style={{flexGrow: 0.40}}></input>\n                    <input type=\"button\" value=\"Clear\" className=\"btn btn-danger\"\n                        onClick={handleClear} style={{flexGrow: 0.40}}></input>\n                </div>\n                <br></br>\n            </form>\n        </div>\n    );\n}\n\nexport default DataPage;","import {\n  Item, cloneItem, BooleanNumber, JSONRepresentationType, getItemFromObject, StorageMin,\n} from '../types/item';\n\nconst DB_NAME = 'shopping-list-app-db';\nconst DB_VERSION = 3;\nconst DB_SHOPPING_LIST_STORE_NAME = 'shopping-list-store';\n\ntype ItemWithID = Item & { id: number };\ntype JSONExportType = {\n  items: Item[],\n  name: string,\n  message: string,\n};\n\nexport class ShoppingDatabase {\n  private db: IDBDatabase;\n\n  constructor(db: IDBDatabase) {\n    this.db = db;\n  }\n\n  getAllItems(maxCount = -1): Promise<Item[]> {\n    return new Promise<Item[]>((resolve, reject) => {\n      const objectStore = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME)\n        .objectStore(DB_SHOPPING_LIST_STORE_NAME);\n      const getReq = objectStore.getAll(null, maxCount > 0 ? maxCount : undefined);\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      getReq.onerror = (event: Event) => {\n        console.debug('getAllItems getAll() failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} getAll: errCode = ${getReq.error}`));\n      };\n\n      // eslint-disable-next-line no-unused-vars\n      getReq.onsuccess = function onsuccess(this: IDBRequest<unknown[]>) {\n        console.debug('getAllItems: getAll() succeeded.');\n        resolve(this.result as Item[]);\n      };\n    });\n  }\n\n  getItemsWithDate(date: Date, keyRangeOnly = IDBKeyRange.only,\n    transaction?: IDBTransaction): Promise<Item[]> {\n    return new Promise<Item[]>((resolve, reject) => {\n      const objectStore = (transaction || this.db.transaction(DB_SHOPPING_LIST_STORE_NAME))\n        .objectStore(DB_SHOPPING_LIST_STORE_NAME);\n      const getReq = objectStore.index('date').getAll(keyRangeOnly(date));\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      getReq.onerror = (event: Event) => {\n        console.debug('getItemsWithDate .index(\"date\").getAll() failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} index(\"date\").getAll: errCode = ${getReq.error}`));\n      };\n\n      // eslint-disable-next-line no-unused-vars\n      getReq.onsuccess = function onsuccess(this: IDBRequest<unknown[]>) {\n        console.debug('getItemsWithDate .index(\"date\").getAll() succeeded');\n        resolve(this.result as Item[]);\n      };\n    });\n  }\n\n  getItemsSaved(saved: BooleanNumber, keyRangeOnly = IDBKeyRange.only,\n    transaction?: IDBTransaction): Promise<Item[]> {\n    return new Promise<Item[]>((resolve, reject) => {\n      const objectStore = (transaction || this.db.transaction(DB_SHOPPING_LIST_STORE_NAME))\n        .objectStore(DB_SHOPPING_LIST_STORE_NAME);\n      const getReq = objectStore.index('saved').getAll(keyRangeOnly(saved));\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      getReq.onerror = (event: Event) => {\n        console.debug('getItemsSaved .index(\"date\").getAll() failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} index(\"date\").getAll: errCode${getReq.error}`));\n      };\n\n      // eslint-disable-next-line no-unused-vars\n      getReq.onsuccess = function onsuccess(this: IDBRequest<unknown[]>) {\n        console.debug('getItemsSaved .index(\"date\").getAll() succeeded');\n        resolve(this.result as Item[]);\n      };\n    });\n  }\n\n  deleteItem(item: Item, keyRangeOnly = IDBKeyRange.only): Promise<undefined> {\n    const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, 'readwrite');\n    const objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n    return this.getItemsWithDate(item.date, keyRangeOnly, transaction)\n      .then((items) => new Promise<undefined>((resolve, reject) => {\n        console.debug('deleteItem: getItemsWithDate succeeded');\n        let found = false;\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        const onerror = (event: Event) => {\n          console.debug('deleteItem add/update failed');\n          reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} add/update failed`));\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        const onsuccess = function onsuccess(this: IDBRequest<undefined>) {\n          console.debug('deleteItem: add/update succeeded.');\n          resolve(undefined);\n        };\n\n        (items as ItemWithID[]).forEach((matchItem: ItemWithID) => {\n          if (!found && matchItem.name === item.name && matchItem.saved === item.saved) {\n            console.debug('deleteItem: found a matching item, deleting it...');\n            const setReq = objectStore.delete(keyRangeOnly(matchItem.id));\n            setReq.onerror = onerror;\n            setReq.onsuccess = onsuccess;\n            found = true;\n          }\n        });\n\n        if (!found) {\n          console.debug('warning: deleteItem no matching entry.');\n          resolve(undefined);\n        }\n      })).catch((reason) => {\n        console.debug('deleteItem: getItemsWithDate() failed');\n        return Promise.reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} getItemsWithDate: reason ${reason}`));\n      });\n  }\n\n  clearAll(): Promise<undefined> {\n    return new Promise<undefined>((resolve, reject) => {\n      const request = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, 'readwrite')\n        .objectStore(DB_SHOPPING_LIST_STORE_NAME).clear();\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      request.onerror = (event: Event) => {\n        console.debug('clearAll: clear() failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} clear: errCode${request.error}`));\n      };\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      request.onsuccess = function onsuccess(this: IDBRequest<undefined>) {\n        console.debug('clearAll: clear() succeeded');\n        resolve(this.result);\n      };\n    });\n  }\n\n  clearUnsaved(keyRangeOnly = IDBKeyRange.only): Promise<undefined> {\n    const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, 'readwrite');\n    const objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n    return new Promise<undefined>((resolve, reject) => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      transaction.onerror = (event: Event) => {\n        console.debug('clearUnsaved: clear() failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} clear: errCode${transaction.error}`));\n      };\n\n      transaction.oncomplete = () => {\n        console.debug('clearUnsaved: clear() succeeded');\n        resolve(undefined);\n      };\n\n      this.getItemsSaved(0, keyRangeOnly, transaction).then((items: unknown) => {\n        (items as ItemWithID[]).forEach((clearItem: ItemWithID) => {\n          objectStore.delete(keyRangeOnly(clearItem.id));\n        });\n      }); // catch is not necessary, it will reject in transaction.onerror().\n    });\n  }\n\n  // eslint-disable-next-line no-undef\n  addUpdateItem(item: Item, keyRangeOnly = IDBKeyRange.only): Promise<IDBValidKey> {\n    const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, 'readwrite');\n    const objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n    return this.getItemsWithDate(item.date, keyRangeOnly, transaction)\n      // eslint-disable-next-line no-undef\n      .then((items: unknown) => new Promise<IDBValidKey>((resolve, reject) => {\n        console.debug('addUpdateItem: getItemsWithDate succeeded');\n        let found = false;\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        const onerror = (event: Event) => {\n          console.debug('addUpdateItem add/update failed');\n          reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} add/update failed`));\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars, no-undef\n        const onsuccess = function onsuccess(this: IDBRequest<IDBValidKey>) {\n          console.debug('addUpdateItem: add/update succeeded.');\n          resolve(this.result);\n        };\n\n        (items as ItemWithID[]).forEach((prevItem: ItemWithID) => {\n          if (!found && prevItem.name === item.name) {\n            console.debug('addUpdateItem: found a matching item, updating it...');\n            const itemClone = { ...item, id: 0 };\n            itemClone.id = prevItem.id;\n            const setReq = objectStore.put(itemClone);\n            setReq.onerror = onerror;\n            setReq.onsuccess = onsuccess;\n            found = true;\n          }\n        });\n\n        if (!found) {\n          console.debug('addUpdateItem no matching entry yet');\n          const setReq = objectStore.add(item);\n          setReq.onerror = onerror;\n          setReq.onsuccess = onsuccess;\n        }\n      })).catch((reason) => {\n        console.debug('addUpdateItem: getItemsWithDate() failed');\n        return Promise.reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} getItemsWithDate: reason ${reason}`));\n      });\n  }\n\n  saveUnsaved(date: Date, keyRangeOnly = IDBKeyRange.only): Promise<undefined> {\n    const transaction = this.db.transaction(DB_SHOPPING_LIST_STORE_NAME, 'readwrite');\n    const objectStore = transaction.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n    return new Promise<undefined>((resolve, reject) => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n      transaction.onerror = (event: Event) => {\n        console.debug('saveUnsaved: transaction failed');\n        reject(new Error(`${DB_SHOPPING_LIST_STORE_NAME} transaction: errCode${transaction.error}`));\n      };\n\n      transaction.oncomplete = () => {\n        console.debug('saveUnsaved: transaction succeeded');\n        resolve(undefined);\n      };\n\n      this.getItemsSaved(0, keyRangeOnly, transaction).then((items: unknown) => {\n        (items as Item[]).forEach((unSavedItem: Item) => {\n          const newItem = cloneItem(unSavedItem);\n          newItem.date = date;\n          newItem.saved = 1;\n          objectStore.put(newItem);\n        });\n        (items as ItemWithID[]).forEach((unSavedItem: ItemWithID) => {\n          objectStore.delete(keyRangeOnly(unSavedItem.id));\n        });\n      }); // catch is not necessary, it will reject in transaction.onerror().\n    });\n  }\n\n  public async exportToJSON(localStorage: StorageMin = window.localStorage):\n    Promise<JSONExportType> {\n    try {\n      const items = await this.getAllItems();\n      return {\n        items,\n        name: localStorage.getItem('settings_name') || '',\n        message: localStorage.getItem('settings_message') || '',\n      };\n    } catch (e) {\n      return {\n        items: [],\n        name: '',\n        message: '',\n      };\n    }\n  }\n\n  public async importFromJSON(jsonString: string,\n    keyRangeOnly = IDBKeyRange.only,\n    localStorage: StorageMin = window.localStorage):\n    Promise<boolean> {\n    let obj;\n\n    try {\n      obj = JSON.parse(jsonString);\n    } catch (e) {\n      // console.log('JSON parse error: ' + e);\n      return false;\n    }\n\n    if (typeof obj !== 'object') {\n      return false;\n    }\n\n    if (!Array.isArray(obj.items)) {\n      return false;\n    }\n\n    const items: Item[] = [];\n    (obj.items as unknown[]).forEach((itemObj) => {\n      const item = getItemFromObject(itemObj);\n      if (item) {\n        items.push(item);\n      }\n    });\n\n    const repr: JSONRepresentationType = {\n      items,\n      name: typeof obj.name === 'string' ? obj.name : '',\n      message: typeof obj.message === 'string' ? obj.message : '',\n    };\n\n    let retVal = false;\n\n    if (items.length) {\n      await this.clearAll();\n      for (let i = 0; i < items.length; ++i) {\n        try {\n          // eslint-disable-next-line no-await-in-loop\n          await this.addUpdateItem(items[i], keyRangeOnly);\n        } catch (e) {\n          console.debug(`Error adding item : ${items[i]} err = ${e}`);\n          return false;\n        }\n      }\n      retVal = true;\n    }\n\n    if (repr.name !== '') {\n      localStorage.setItem('settings_name', repr.name);\n      retVal = true;\n    }\n    if (repr.message !== '') {\n      localStorage.setItem('settings_message', repr.message);\n      retVal = true;\n    }\n\n    return retVal;\n  }\n}\n\nexport const openDb = (storageDb: IDBFactory, beSilent = false):\n  Promise<ShoppingDatabase> => {\n  if (beSilent) {\n    console.debug = () => undefined;\n  }\n\n  return new Promise<ShoppingDatabase>((resolve, reject) => {\n    console.debug(`Opening DB: ${DB_NAME}`);\n    const openDbReq = storageDb.open(DB_NAME, DB_VERSION);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n    openDbReq.onsuccess = function onsuccess(this: IDBRequest<IDBDatabase>) {\n      console.debug(`Opened DB: ${DB_NAME}`);\n      resolve(new ShoppingDatabase(this.result));\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n    openDbReq.onerror = (event: Event) => {\n      reject(new Error(`openDb failed errCode: ${openDbReq.error}`));\n    };\n\n    type DatabaseWrapper = { result: IDBDatabase };\n    type TransactionWrapper = { transaction: IDBTransaction };\n\n    openDbReq.onupgradeneeded = (event: Event) => {\n      console.debug(`openDb.onupgradeneeded : ${DB_NAME}`);\n      if (!event || !event.currentTarget ||\n        !(event.currentTarget as unknown as DatabaseWrapper).result) {\n        console.debug(`openDb.onupgradeneeded : ${DB_NAME} no new db in event!`);\n        reject(new Error('onupgradeneeded: no new db!'));\n        return;\n      }\n      const db: IDBDatabase = (event.currentTarget as unknown as DatabaseWrapper).result;\n      const tx: IDBTransaction = (event.target as unknown as TransactionWrapper).transaction;\n\n      if (!db.objectStoreNames.contains(DB_SHOPPING_LIST_STORE_NAME)) {\n        const listStore = db.createObjectStore(DB_SHOPPING_LIST_STORE_NAME,\n          { keyPath: 'id', autoIncrement: true });\n        listStore.createIndex('date', 'date', { unique: false });\n        listStore.createIndex('saved', 'saved', { unique: false });\n      } else {\n        const listStore = tx.objectStore(DB_SHOPPING_LIST_STORE_NAME);\n        if (!listStore.indexNames.contains('saved')) {\n          listStore.createIndex('saved', 'saved', { unique: false });\n        }\n      }\n    };\n\n    openDbReq.onblocked = () => {\n      console.debug(`openDb.onupgradeneeded : ${DB_NAME} blocked on other tabs`);\n      reject(new Error('openDb upgrade: close other tabs and try again.'));\n    };\n  });\n};\n","import {\n  HashRouter,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\n\nimport './styles/navbar.css';\nimport './styles/buttons.css';\nimport './styles/list.css';\nimport React from 'react';\nimport { Item, ItemStatesAndSetters } from './types/item';\n\nimport { NewList } from './pages/NewList';\nimport { PreviousLists } from './pages/PreviousLists';\nimport DataPage from './pages/DataPage';\nimport { openDb } from './storage/storageDefs';\nimport { StorageType, StorageProvider } from './contexts/storage';\n\nconst { useEffect, useState } = React;\nconst storage = new StorageType();\n\n// eslint-disable-next-line func-names\n(function () {\n  openDb(indexedDB).then((db) => {\n    storage.setDB(db);\n    storage.fetch();\n  });\n}());\n\nfunction App() {\n  const [masterList, setMasterList] = useState(new Set<string>([]));\n  const [dbIsEmpty, setDBIsEmpty] = useState(false);\n  const [masterItems, setMasterItems] = useState([] as Item[]);\n  const [newList, setNewList] = useState<Item[]>([]);\n  const [dateMap, setDateMap] = useState<Map<number, Item[]>>(new Map<number, Item[]>());\n  const [name, setName] = useState('');\n  const [quantity, setQuantity] = useState(0);\n  const [unit, setUnit] = useState('');\n  const [comment, setComment] = useState('');\n  const [date, setDate] = useState(new Date());\n  const [category, setCategory] = useState(undefined as (string | undefined));\n  const [existing, setExisting] = useState(false);\n  const [runFetchEffect, setRunFetchEffect] = useState(false);\n  const itemStatesAndSetters: ItemStatesAndSetters = {\n    name,\n    setName,\n    quantity,\n    setQuantity,\n    unit,\n    setUnit,\n    comment,\n    setComment,\n    existing,\n    setExisting,\n    date,\n    setDate,\n    category,\n    setCategory,\n  };\n\n  // fetch initial state from DB.\n  useEffect(() => {\n    if (!runFetchEffect && (masterList.size || dbIsEmpty)) {\n      return;\n    }\n\n    if (storage.hasDB()) {\n      // console.log('Fetching...');\n      storage.fetch();\n    }\n\n    const dbListener = (mList: Item[]) => {\n      if (runFetchEffect) setRunFetchEffect(false);\n      setDBIsEmpty((mList.length === 0));\n      setMasterList(new Set<string>(mList.map((item) => item.name)));\n      const nameToItem = new Map<string, Item>();\n      const currentList: Item[] = [];\n      const dateMapTemp = new Map<number, Item[]>();\n      mList.forEach((item) => {\n        if (!item.saved) {\n          currentList.push(item);\n        }\n\n        const prevItem = nameToItem.get(item.name);\n        if (!prevItem) {\n          nameToItem.set(item.name, item);\n        } else if (prevItem.date < item.date) {\n          nameToItem.set(item.name, item);\n        }\n\n        if (item.saved) {\n          const dateItemList = dateMapTemp.get(item.date.valueOf());\n          if (!dateItemList) {\n            dateMapTemp.set(item.date.valueOf(), [item]);\n          } else {\n            dateItemList.push(item);\n          }\n        }\n      });\n      setMasterItems([...nameToItem.values()]);\n      setNewList(currentList);\n      if (currentList.length) {\n        setDate(currentList[0].date);\n      }\n      setDateMap(dateMapTemp);\n    };\n    storage.addListener(dbListener);\n\n    // eslint-disable-next-line consistent-return\n    return function cleanup() {\n      storage.removeListener(dbListener);\n    };\n  });\n\n  return (\n    <HashRouter>\n      <div>\n        <nav>\n          <ul className=\"nav\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">New list</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/previous\" className=\"nav-link\">Previous lists</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/data\" className=\"nav-link\">Data</Link>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"nav-space\" />\n        <br />\n\n        <StorageProvider value={storage}>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/data\">\n              <DataPage setRunFetchEffect={setRunFetchEffect} />\n            </Route>\n            <Route path=\"/previous\">\n              <PreviousLists dateMap={dateMap} setNewList={setNewList} date={date} />\n            </Route>\n            <Route path=\"/\">\n              <NewList\n                masterList={masterList}\n                setMasterList={setMasterList}\n                newList={newList}\n                setNewList={setNewList}\n                masterItems={masterItems}\n                newItemStatesAndSetters={itemStatesAndSetters}\n                runFetchEffect={runFetchEffect}\n                setRunFetchEffect={setRunFetchEffect}\n              />\n            </Route>\n          </Switch>\n        </StorageProvider>\n\n        <footer><small>&copy; Dennis Francis 2021</small></footer>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}